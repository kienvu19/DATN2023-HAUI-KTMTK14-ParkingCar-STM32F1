
bai_do_xe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d8  080050d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080050d8  080050d8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050d8  080050d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050dc  080050dc  000150dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080050e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000078  08005158  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08005158  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001141a  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be7  00000000  00000000  000314bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  000340a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  00035300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196d9  00000000  00000000  00036448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015659  00000000  00000000  0004fb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc2f  00000000  00000000  0006517a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4da9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000510c  00000000  00000000  000f4dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004fa8 	.word	0x08004fa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004fa8 	.word	0x08004fa8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b4d      	ldr	r3, [pc, #308]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a4c      	ldr	r2, [pc, #304]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b4a      	ldr	r3, [pc, #296]	; (80002a8 <MX_GPIO_Init+0x14c>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b47      	ldr	r3, [pc, #284]	; (80002a8 <MX_GPIO_Init+0x14c>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a46      	ldr	r2, [pc, #280]	; (80002a8 <MX_GPIO_Init+0x14c>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b44      	ldr	r3, [pc, #272]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b41      	ldr	r3, [pc, #260]	; (80002a8 <MX_GPIO_Init+0x14c>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a40      	ldr	r2, [pc, #256]	; (80002a8 <MX_GPIO_Init+0x14c>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b3e      	ldr	r3, [pc, #248]	; (80002a8 <MX_GPIO_Init+0x14c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STT_GPIO_Port, LED_STT_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001be:	483b      	ldr	r0, [pc, #236]	; (80002ac <MX_GPIO_Init+0x150>)
 80001c0:	f001 febf 	bl	8001f42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RC522_NSS_Pin|SERVO2_Pin|SERVO1_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	f243 0101 	movw	r1, #12289	; 0x3001
 80001ca:	4839      	ldr	r0, [pc, #228]	; (80002b0 <MX_GPIO_Init+0x154>)
 80001cc:	f001 feb9 	bl	8001f42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DTE_Pin|SPEAKER_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80001d6:	4837      	ldr	r0, [pc, #220]	; (80002b4 <MX_GPIO_Init+0x158>)
 80001d8:	f001 feb3 	bl	8001f42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_STT_Pin;
 80001dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e2:	2301      	movs	r3, #1
 80001e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_STT_GPIO_Port, &GPIO_InitStruct);
 80001ee:	f107 0310 	add.w	r3, r7, #16
 80001f2:	4619      	mov	r1, r3
 80001f4:	482d      	ldr	r0, [pc, #180]	; (80002ac <MX_GPIO_Init+0x150>)
 80001f6:	f001 fd09 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BTN2_Pin|VT6_Pin;
 80001fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80001fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000200:	2300      	movs	r3, #0
 8000202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000204:	2300      	movs	r3, #0
 8000206:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	4827      	ldr	r0, [pc, #156]	; (80002ac <MX_GPIO_Init+0x150>)
 8000210:	f001 fcfc 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VT3_Pin|VT5_Pin|VT2_Pin|VT4_Pin;
 8000214:	230f      	movs	r3, #15
 8000216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021c:	2300      	movs	r3, #0
 800021e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4823      	ldr	r0, [pc, #140]	; (80002b4 <MX_GPIO_Init+0x158>)
 8000228:	f001 fcf0 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RC522_NSS_Pin;
 800022c:	2301      	movs	r3, #1
 800022e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000230:	2301      	movs	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000234:	2300      	movs	r3, #0
 8000236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000238:	2302      	movs	r3, #2
 800023a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC522_NSS_GPIO_Port, &GPIO_InitStruct);
 800023c:	f107 0310 	add.w	r3, r7, #16
 8000240:	4619      	mov	r1, r3
 8000242:	481b      	ldr	r0, [pc, #108]	; (80002b0 <MX_GPIO_Init+0x154>)
 8000244:	f001 fce2 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VT1_Pin|CB_OUT_Pin|CB_IN_Pin;
 8000248:	f640 4302 	movw	r3, #3074	; 0xc02
 800024c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000252:	2300      	movs	r3, #0
 8000254:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	4619      	mov	r1, r3
 800025c:	4814      	ldr	r0, [pc, #80]	; (80002b0 <MX_GPIO_Init+0x154>)
 800025e:	f001 fcd5 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SERVO2_Pin|SERVO1_Pin;
 8000262:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000268:	2301      	movs	r3, #1
 800026a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026c:	2300      	movs	r3, #0
 800026e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000270:	2303      	movs	r3, #3
 8000272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	4619      	mov	r1, r3
 800027a:	480d      	ldr	r0, [pc, #52]	; (80002b0 <MX_GPIO_Init+0x154>)
 800027c:	f001 fcc6 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DTE_Pin|SPEAKER_Pin;
 8000280:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000286:	2301      	movs	r3, #1
 8000288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
 800028c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800028e:	2302      	movs	r3, #2
 8000290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000292:	f107 0310 	add.w	r3, r7, #16
 8000296:	4619      	mov	r1, r3
 8000298:	4806      	ldr	r0, [pc, #24]	; (80002b4 <MX_GPIO_Init+0x158>)
 800029a:	f001 fcb7 	bl	8001c0c <HAL_GPIO_Init>

}
 800029e:	bf00      	nop
 80002a0:	3720      	adds	r7, #32
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	40011000 	.word	0x40011000
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	40010800 	.word	0x40010800

080002b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <MX_I2C1_Init+0x50>)
 80002be:	4a13      	ldr	r2, [pc, #76]	; (800030c <MX_I2C1_Init+0x54>)
 80002c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002c2:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_I2C1_Init+0x50>)
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <MX_I2C1_Init+0x58>)
 80002c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_I2C1_Init+0x50>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_I2C1_Init+0x50>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_I2C1_Init+0x50>)
 80002d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <MX_I2C1_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_I2C1_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <MX_I2C1_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_I2C1_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <MX_I2C1_Init+0x50>)
 80002f6:	f001 fe55 	bl	8001fa4 <HAL_I2C_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000300:	f000 fdda 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000094 	.word	0x20000094
 800030c:	40005400 	.word	0x40005400
 8000310:	000186a0 	.word	0x000186a0

08000314 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08a      	sub	sp, #40	; 0x28
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a1d      	ldr	r2, [pc, #116]	; (80003a4 <HAL_I2C_MspInit+0x90>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d132      	bne.n	800039a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000334:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <HAL_I2C_MspInit+0x94>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <HAL_I2C_MspInit+0x94>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <HAL_I2C_MspInit+0x94>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800034c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000352:	2312      	movs	r3, #18
 8000354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000356:	2303      	movs	r3, #3
 8000358:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	4619      	mov	r1, r3
 8000360:	4812      	ldr	r0, [pc, #72]	; (80003ac <HAL_I2C_MspInit+0x98>)
 8000362:	f001 fc53 	bl	8001c0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <HAL_I2C_MspInit+0x9c>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	627b      	str	r3, [r7, #36]	; 0x24
 800036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800036e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000372:	627b      	str	r3, [r7, #36]	; 0x24
 8000374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000376:	f043 0302 	orr.w	r3, r3, #2
 800037a:	627b      	str	r3, [r7, #36]	; 0x24
 800037c:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <HAL_I2C_MspInit+0x9c>)
 800037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000380:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <HAL_I2C_MspInit+0x94>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	4a08      	ldr	r2, [pc, #32]	; (80003a8 <HAL_I2C_MspInit+0x94>)
 8000388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800038c:	61d3      	str	r3, [r2, #28]
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <HAL_I2C_MspInit+0x94>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800039a:	bf00      	nop
 800039c:	3728      	adds	r7, #40	; 0x28
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40005400 	.word	0x40005400
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	40010000 	.word	0x40010000

080003b4 <lcd_send_cmd>:
//extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af02      	add	r7, sp, #8
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	011b      	lsls	r3, r3, #4
 80003ca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	f043 030c 	orr.w	r3, r3, #12
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	f043 0308 	orr.w	r3, r3, #8
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80003e0:	7bbb      	ldrb	r3, [r7, #14]
 80003e2:	f043 030c 	orr.w	r3, r3, #12
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	f043 0308 	orr.w	r3, r3, #8
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003f4:	f107 0208 	add.w	r2, r7, #8
 80003f8:	2364      	movs	r3, #100	; 0x64
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2304      	movs	r3, #4
 80003fe:	214e      	movs	r1, #78	; 0x4e
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <lcd_send_cmd+0x60>)
 8000402:	f001 ff13 	bl	800222c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f001 fa1e 	bl	8001848 <HAL_Delay>
}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000094 	.word	0x20000094

08000418 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b2db      	uxtb	r3, r3
 8000438:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	f043 0309 	orr.w	r3, r3, #9
 8000440:	b2db      	uxtb	r3, r3
 8000442:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000444:	7bbb      	ldrb	r3, [r7, #14]
 8000446:	f043 030d 	orr.w	r3, r3, #13
 800044a:	b2db      	uxtb	r3, r3
 800044c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800044e:	7bbb      	ldrb	r3, [r7, #14]
 8000450:	f043 0309 	orr.w	r3, r3, #9
 8000454:	b2db      	uxtb	r3, r3
 8000456:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000458:	f107 0208 	add.w	r2, r7, #8
 800045c:	2364      	movs	r3, #100	; 0x64
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	2304      	movs	r3, #4
 8000462:	214e      	movs	r1, #78	; 0x4e
 8000464:	4803      	ldr	r0, [pc, #12]	; (8000474 <lcd_send_data+0x5c>)
 8000466:	f001 fee1 	bl	800222c <HAL_I2C_Master_Transmit>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000094 	.word	0x20000094

08000478 <lcd_init>:

void lcd_init (void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 800047c:	2033      	movs	r0, #51	; 0x33
 800047e:	f7ff ff99 	bl	80003b4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000482:	2032      	movs	r0, #50	; 0x32
 8000484:	f7ff ff96 	bl	80003b4 <lcd_send_cmd>
	HAL_Delay(50);
 8000488:	2032      	movs	r0, #50	; 0x32
 800048a:	f001 f9dd 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800048e:	2028      	movs	r0, #40	; 0x28
 8000490:	f7ff ff90 	bl	80003b4 <lcd_send_cmd>
	HAL_Delay(50);
 8000494:	2032      	movs	r0, #50	; 0x32
 8000496:	f001 f9d7 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff ff8a 	bl	80003b4 <lcd_send_cmd>
	HAL_Delay(70);
 80004a0:	2046      	movs	r0, #70	; 0x46
 80004a2:	f001 f9d1 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80004a6:	2006      	movs	r0, #6
 80004a8:	f7ff ff84 	bl	80003b4 <lcd_send_cmd>
	HAL_Delay(50);
 80004ac:	2032      	movs	r0, #50	; 0x32
 80004ae:	f001 f9cb 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80004b2:	200c      	movs	r0, #12
 80004b4:	f7ff ff7e 	bl	80003b4 <lcd_send_cmd>
	HAL_Delay(50);
 80004b8:	2032      	movs	r0, #50	; 0x32
 80004ba:	f001 f9c5 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80004be:	2002      	movs	r0, #2
 80004c0:	f7ff ff78 	bl	80003b4 <lcd_send_cmd>
	HAL_Delay(50);
 80004c4:	2032      	movs	r0, #50	; 0x32
 80004c6:	f001 f9bf 	bl	8001848 <HAL_Delay>
	lcd_send_cmd (0x80);
 80004ca:	2080      	movs	r0, #128	; 0x80
 80004cc:	f7ff ff72 	bl	80003b4 <lcd_send_cmd>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80004dc:	e006      	b.n	80004ec <lcd_send_string+0x18>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	1c5a      	adds	r2, r3, #1
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff96 	bl	8000418 <lcd_send_data>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1f4      	bne.n	80004de <lcd_send_string+0xa>
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <lcd_clear>:

void lcd_clear(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff ff56 	bl	80003b4 <lcd_send_cmd>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d108      	bne.n	800052e <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	b2da      	uxtb	r2, r3
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	4413      	add	r3, r2
 8000526:	b2db      	uxtb	r3, r3
 8000528:	337f      	adds	r3, #127	; 0x7f
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	e022      	b.n	8000574 <lcd_goto_XY+0x68>
	}
	else if(row==2)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d109      	bne.n	8000548 <lcd_goto_XY+0x3c>
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	3340      	adds	r3, #64	; 0x40
 800053a:	b2db      	uxtb	r3, r3
 800053c:	b25b      	sxtb	r3, r3
 800053e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000542:	b25b      	sxtb	r3, r3
 8000544:	73fb      	strb	r3, [r7, #15]
 8000546:	e015      	b.n	8000574 <lcd_goto_XY+0x68>
	}
	else if(row==3)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b03      	cmp	r3, #3
 800054c:	d109      	bne.n	8000562 <lcd_goto_XY+0x56>
	{
		pos_Addr = 0x80 | (0x14 + col);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	3314      	adds	r3, #20
 8000554:	b2db      	uxtb	r3, r3
 8000556:	b25b      	sxtb	r3, r3
 8000558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800055c:	b25b      	sxtb	r3, r3
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	e008      	b.n	8000574 <lcd_goto_XY+0x68>
	}
	else
	{
		pos_Addr = 0x80 | (0x54 + col);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	3354      	adds	r3, #84	; 0x54
 8000568:	b2db      	uxtb	r3, r3
 800056a:	b25b      	sxtb	r3, r3
 800056c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000570:	b25b      	sxtb	r3, r3
 8000572:	73fb      	strb	r3, [r7, #15]
	}

	lcd_send_cmd(pos_Addr);
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff1c 	bl	80003b4 <lcd_send_cmd>
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <lcd_string>:


void lcd_string(char hang,char cot,char *str)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	603a      	str	r2, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	460b      	mov	r3, r1
 8000592:	71bb      	strb	r3, [r7, #6]
	lcd_xy(hang,cot-1);
 8000594:	79fa      	ldrb	r2, [r7, #7]
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	3b01      	subs	r3, #1
 800059a:	4619      	mov	r1, r3
 800059c:	4610      	mov	r0, r2
 800059e:	f7ff ffb5 	bl	800050c <lcd_goto_XY>
	lcd_send_string(str);
 80005a2:	6838      	ldr	r0, [r7, #0]
 80005a4:	f7ff ff96 	bl	80004d4 <lcd_send_string>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <servo>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void servo(unsigned char servo,unsigned char vi_tri)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	460a      	mov	r2, r1
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	4613      	mov	r3, r2
 80005be:	71bb      	strb	r3, [r7, #6]
  unsigned int t1=0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  //ve vi tri cho
  if(vi_tri==WAIT)
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d134      	bne.n	8000634 <servo+0x84>
  for(t1=0;t1<10;t1++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	e02d      	b.n	800062c <servo+0x7c>
  {
    if(servo==SERVO1) HAL_GPIO_WritePin(SERVO1_GPIO_Port, SERVO1_Pin, 1);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d105      	bne.n	80005e2 <servo+0x32>
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4833      	ldr	r0, [pc, #204]	; (80006ac <servo+0xfc>)
 80005de:	f001 fcb0 	bl	8001f42 <HAL_GPIO_WritePin>
    if(servo==SERVO2) HAL_GPIO_WritePin(SERVO2_GPIO_Port, SERVO2_Pin, 1);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d105      	bne.n	80005f4 <servo+0x44>
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ee:	482f      	ldr	r0, [pc, #188]	; (80006ac <servo+0xfc>)
 80005f0:	f001 fca7 	bl	8001f42 <HAL_GPIO_WritePin>
    delay_us(2300);
 80005f4:	f640 00fc 	movw	r0, #2300	; 0x8fc
 80005f8:	f000 f85a 	bl	80006b0 <delay_us>
    if(servo==SERVO1) HAL_GPIO_WritePin(SERVO1_GPIO_Port, SERVO1_Pin, 0);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d105      	bne.n	800060e <servo+0x5e>
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000608:	4828      	ldr	r0, [pc, #160]	; (80006ac <servo+0xfc>)
 800060a:	f001 fc9a 	bl	8001f42 <HAL_GPIO_WritePin>
    if(servo==SERVO2) HAL_GPIO_WritePin(SERVO2_GPIO_Port, SERVO2_Pin, 0);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d105      	bne.n	8000620 <servo+0x70>
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061a:	4824      	ldr	r0, [pc, #144]	; (80006ac <servo+0xfc>)
 800061c:	f001 fc91 	bl	8001f42 <HAL_GPIO_WritePin>
    HAL_Delay(19);
 8000620:	2013      	movs	r0, #19
 8000622:	f001 f911 	bl	8001848 <HAL_Delay>
  for(t1=0;t1<10;t1++)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	3301      	adds	r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b09      	cmp	r3, #9
 8000630:	d9ce      	bls.n	80005d0 <servo+0x20>
    if(servo==SERVO1) HAL_GPIO_WritePin(SERVO1_GPIO_Port, SERVO1_Pin, 0);
    if(servo==SERVO2) HAL_GPIO_WritePin(SERVO2_GPIO_Port, SERVO2_Pin, 0);
    HAL_Delay(19);
  }

}
 8000632:	e036      	b.n	80006a2 <servo+0xf2>
  else if(vi_tri==PUSH)
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d133      	bne.n	80006a2 <servo+0xf2>
  for(t1=0;t1<10;t1++)
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	e02d      	b.n	800069c <servo+0xec>
	if(servo==SERVO1) HAL_GPIO_WritePin(SERVO1_GPIO_Port, SERVO1_Pin, 1);
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d105      	bne.n	8000652 <servo+0xa2>
 8000646:	2201      	movs	r2, #1
 8000648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064c:	4817      	ldr	r0, [pc, #92]	; (80006ac <servo+0xfc>)
 800064e:	f001 fc78 	bl	8001f42 <HAL_GPIO_WritePin>
	if(servo==SERVO2) HAL_GPIO_WritePin(SERVO2_GPIO_Port, SERVO2_Pin, 1);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d105      	bne.n	8000664 <servo+0xb4>
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065e:	4813      	ldr	r0, [pc, #76]	; (80006ac <servo+0xfc>)
 8000660:	f001 fc6f 	bl	8001f42 <HAL_GPIO_WritePin>
	delay_us(1500);
 8000664:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000668:	f000 f822 	bl	80006b0 <delay_us>
    if(servo==SERVO1) HAL_GPIO_WritePin(SERVO1_GPIO_Port, SERVO1_Pin, 0);
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d105      	bne.n	800067e <servo+0xce>
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <servo+0xfc>)
 800067a:	f001 fc62 	bl	8001f42 <HAL_GPIO_WritePin>
    if(servo==SERVO2) HAL_GPIO_WritePin(SERVO2_GPIO_Port, SERVO2_Pin, 0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d105      	bne.n	8000690 <servo+0xe0>
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068a:	4808      	ldr	r0, [pc, #32]	; (80006ac <servo+0xfc>)
 800068c:	f001 fc59 	bl	8001f42 <HAL_GPIO_WritePin>
    HAL_Delay(19);
 8000690:	2013      	movs	r0, #19
 8000692:	f001 f8d9 	bl	8001848 <HAL_Delay>
  for(t1=0;t1<10;t1++)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b09      	cmp	r3, #9
 80006a0:	d9ce      	bls.n	8000640 <servo+0x90>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40010c00 	.word	0x40010c00

080006b0 <delay_us>:
	if(stt==OPEN) servo(SERVO_RA,WAIT);
	else servo(SERVO_RA,PUSH);
}

void delay_us (uint32_t us)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim2);
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <delay_us+0x30>)
 80006ba:	f002 fff3 	bl	80036a4 <HAL_TIM_Base_Start>
    __HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <delay_us+0x30>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80006c6:	bf00      	nop
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <delay_us+0x30>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d8f9      	bhi.n	80006c8 <delay_us+0x18>
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200002ec 	.word	0x200002ec

080006e4 <HAL_UART_RxCpltCallback>:

/*
 * Ngắt nhận dữ liệu từ máy tính gửi xuống
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
		//interrupt rs422
	  if(huart->Instance==huart1.Instance)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <HAL_UART_RxCpltCallback+0x5c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d119      	bne.n	800072c <HAL_UART_RxCpltCallback+0x48>
	  {
		  if(uart_char_rec!='\n' && uart_done_frame==false)
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_UART_RxCpltCallback+0x60>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b0a      	cmp	r3, #10
 80006fe:	d012      	beq.n	8000726 <HAL_UART_RxCpltCallback+0x42>
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_UART_RxCpltCallback+0x64>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f083 0301 	eor.w	r3, r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00b      	beq.n	8000726 <HAL_UART_RxCpltCallback+0x42>
		  {
			  uart_data_rec[uart_count_char]=uart_char_rec;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_UART_RxCpltCallback+0x68>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <HAL_UART_RxCpltCallback+0x60>)
 8000714:	7811      	ldrb	r1, [r2, #0]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_UART_RxCpltCallback+0x6c>)
 8000718:	54d1      	strb	r1, [r2, r3]
			  uart_count_char++;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_UART_RxCpltCallback+0x68>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <HAL_UART_RxCpltCallback+0x68>)
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	e002      	b.n	800072c <HAL_UART_RxCpltCallback+0x48>
		  }
		  else
		  {
			  uart_done_frame=true;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_UART_RxCpltCallback+0x64>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  HAL_UART_Receive_IT(&huart1,&uart_char_rec,1);
 800072c:	2201      	movs	r2, #1
 800072e:	4905      	ldr	r1, [pc, #20]	; (8000744 <HAL_UART_RxCpltCallback+0x60>)
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <HAL_UART_RxCpltCallback+0x5c>)
 8000732:	f003 fafa 	bl	8003d2a <HAL_UART_Receive_IT>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000334 	.word	0x20000334
 8000744:	2000017c 	.word	0x2000017c
 8000748:	20000184 	.word	0x20000184
 800074c:	20000180 	.word	0x20000180
 8000750:	20000118 	.word	0x20000118

08000754 <rs485_print>:

void rs485_print(const char *fmt, ...)
{
 8000754:	b40f      	push	{r0, r1, r2, r3}
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
	static char buffer[256];
	unsigned int len=0;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
	va_list args;
	va_start(args, fmt);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076e:	4810      	ldr	r0, [pc, #64]	; (80007b0 <rs485_print+0x5c>)
 8000770:	f003 ffb2 	bl	80046d8 <vsniprintf>
	va_end(args);
	len=strlen(buffer);
 8000774:	480e      	ldr	r0, [pc, #56]	; (80007b0 <rs485_print+0x5c>)
 8000776:	f7ff fce9 	bl	800014c <strlen>
 800077a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DTE_GPIO_Port, DTE_Pin, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <rs485_print+0x60>)
 8000784:	f001 fbdd 	bl	8001f42 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,buffer,len,100);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	b29a      	uxth	r2, r3
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <rs485_print+0x5c>)
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <rs485_print+0x64>)
 8000792:	f003 fa38 	bl	8003c06 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(DTE_GPIO_Port, DTE_Pin, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <rs485_print+0x60>)
 800079e:	f001 fbd0 	bl	8001f42 <HAL_GPIO_WritePin>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ac:	b004      	add	sp, #16
 80007ae:	4770      	bx	lr
 80007b0:	20000190 	.word	0x20000190
 80007b4:	40010800 	.word	0x40010800
 80007b8:	20000334 	.word	0x20000334

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 ffdf 	bl	8001784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 fb01 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f7ff fcc7 	bl	800015c <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ce:	f7ff fd73 	bl	80002b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007d2:	f000 fdab 	bl	800132c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007d6:	f000 ff31 	bl	800163c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80007da:	f000 fec7 	bl	800156c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80007de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e2:	f001 f831 	bl	8001848 <HAL_Delay>

  MFRC522_Init();
 80007e6:	f000 fd60 	bl	80012aa <MFRC522_Init>
  lcd_init(); HAL_Delay(100);;
 80007ea:	f7ff fe45 	bl	8000478 <lcd_init>
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f001 f82a 	bl	8001848 <HAL_Delay>
  lcd_string(1, 4, "BAI DO XE");
 80007f4:	4a9e      	ldr	r2, [pc, #632]	; (8000a70 <main+0x2b4>)
 80007f6:	2104      	movs	r1, #4
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff fec3 	bl	8000584 <lcd_string>
  lcd_string(2, 4, "WELL COME");
 80007fe:	4a9d      	ldr	r2, [pc, #628]	; (8000a74 <main+0x2b8>)
 8000800:	2104      	movs	r1, #4
 8000802:	2002      	movs	r0, #2
 8000804:	f7ff febe 	bl	8000584 <lcd_string>

  //HAL_TIM_Base_Start(&htim2);
  HAL_UART_Receive_IT(&huart1,&uart_char_rec,1);
 8000808:	2201      	movs	r2, #1
 800080a:	499b      	ldr	r1, [pc, #620]	; (8000a78 <main+0x2bc>)
 800080c:	489b      	ldr	r0, [pc, #620]	; (8000a7c <main+0x2c0>)
 800080e:	f003 fa8c 	bl	8003d2a <HAL_UART_Receive_IT>

  servo(SERVO1, WAIT);
 8000812:	2103      	movs	r1, #3
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fecb 	bl	80005b0 <servo>
  servo(SERVO2, WAIT2);
 800081a:	2102      	movs	r1, #2
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff fec7 	bl	80005b0 <servo>
		//else if(stt_servo_out_last==PUSH2 && stt_servo_out==WAIT2) servo(SERVO2,WAIT2);
		//stt_servo_out_last=stt_servo_out;



	if (!MFRC522_Request(PICC_REQIDL, str))
 8000822:	4997      	ldr	r1, [pc, #604]	; (8000a80 <main+0x2c4>)
 8000824:	2026      	movs	r0, #38	; 0x26
 8000826:	f000 fc0f 	bl	8001048 <MFRC522_Request>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	f040 817e 	bne.w	8000b2e <main+0x372>
	{
		if (!MFRC522_Anticoll(str))
 8000832:	4893      	ldr	r0, [pc, #588]	; (8000a80 <main+0x2c4>)
 8000834:	f000 fcfc 	bl	8001230 <MFRC522_Anticoll>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	f040 8177 	bne.w	8000b2e <main+0x372>
		{
			j = 0;
 8000840:	4b90      	ldr	r3, [pc, #576]	; (8000a84 <main+0x2c8>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
			q = 0;
 8000846:	4b90      	ldr	r3, [pc, #576]	; (8000a88 <main+0x2cc>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
			b = 9;
 800084c:	4b8f      	ldr	r3, [pc, #572]	; (8000a8c <main+0x2d0>)
 800084e:	2209      	movs	r2, #9
 8000850:	701a      	strb	r2, [r3, #0]
			en = 1;
 8000852:	4b8f      	ldr	r3, [pc, #572]	; (8000a90 <main+0x2d4>)
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]

			for (i=0; i<4; i++) if (lastID[i] != str[i]) j = 1;								// Repeat test
 8000858:	4b8e      	ldr	r3, [pc, #568]	; (8000a94 <main+0x2d8>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	e014      	b.n	800088a <main+0xce>
 8000860:	4b8c      	ldr	r3, [pc, #560]	; (8000a94 <main+0x2d8>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b8c      	ldr	r3, [pc, #560]	; (8000a98 <main+0x2dc>)
 8000868:	5c9a      	ldrb	r2, [r3, r2]
 800086a:	4b8a      	ldr	r3, [pc, #552]	; (8000a94 <main+0x2d8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	4b83      	ldr	r3, [pc, #524]	; (8000a80 <main+0x2c4>)
 8000872:	5c5b      	ldrb	r3, [r3, r1]
 8000874:	429a      	cmp	r2, r3
 8000876:	d002      	beq.n	800087e <main+0xc2>
 8000878:	4b82      	ldr	r3, [pc, #520]	; (8000a84 <main+0x2c8>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	4b85      	ldr	r3, [pc, #532]	; (8000a94 <main+0x2d8>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b83      	ldr	r3, [pc, #524]	; (8000a94 <main+0x2d8>)
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	4b82      	ldr	r3, [pc, #520]	; (8000a94 <main+0x2d8>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d9e6      	bls.n	8000860 <main+0xa4>
			//if (j && en)
			{
				q = 0;
 8000892:	4b7d      	ldr	r3, [pc, #500]	; (8000a88 <main+0x2cc>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
				en = 0;
 8000898:	4b7d      	ldr	r3, [pc, #500]	; (8000a90 <main+0x2d4>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
				for (i=0; i<4; i++) lastID[i] = str[i];
 800089e:	4b7d      	ldr	r3, [pc, #500]	; (8000a94 <main+0x2d8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	e00f      	b.n	80008c6 <main+0x10a>
 80008a6:	4b7b      	ldr	r3, [pc, #492]	; (8000a94 <main+0x2d8>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4b79      	ldr	r3, [pc, #484]	; (8000a94 <main+0x2d8>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b73      	ldr	r3, [pc, #460]	; (8000a80 <main+0x2c4>)
 80008b4:	5c59      	ldrb	r1, [r3, r1]
 80008b6:	4b78      	ldr	r3, [pc, #480]	; (8000a98 <main+0x2dc>)
 80008b8:	5499      	strb	r1, [r3, r2]
 80008ba:	4b76      	ldr	r3, [pc, #472]	; (8000a94 <main+0x2d8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b74      	ldr	r3, [pc, #464]	; (8000a94 <main+0x2d8>)
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	4b73      	ldr	r3, [pc, #460]	; (8000a94 <main+0x2d8>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d9eb      	bls.n	80008a6 <main+0xea>
				for (i=0; i<4; i++)
 80008ce:	4b71      	ldr	r3, [pc, #452]	; (8000a94 <main+0x2d8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	e027      	b.n	8000926 <main+0x16a>
				{
					char_to_hex(str[i]);
 80008d6:	4b6f      	ldr	r3, [pc, #444]	; (8000a94 <main+0x2d8>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	4b68      	ldr	r3, [pc, #416]	; (8000a80 <main+0x2c4>)
 80008de:	5c9b      	ldrb	r3, [r3, r2]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fab5 	bl	8000e50 <char_to_hex>
					txBuffer[b] = retstr[0];
 80008e6:	4b69      	ldr	r3, [pc, #420]	; (8000a8c <main+0x2d0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b6b      	ldr	r3, [pc, #428]	; (8000a9c <main+0x2e0>)
 80008ee:	7819      	ldrb	r1, [r3, #0]
 80008f0:	4b6b      	ldr	r3, [pc, #428]	; (8000aa0 <main+0x2e4>)
 80008f2:	5499      	strb	r1, [r3, r2]
					b++;
 80008f4:	4b65      	ldr	r3, [pc, #404]	; (8000a8c <main+0x2d0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b63      	ldr	r3, [pc, #396]	; (8000a8c <main+0x2d0>)
 80008fe:	701a      	strb	r2, [r3, #0]
					txBuffer[b] = retstr[1];
 8000900:	4b62      	ldr	r3, [pc, #392]	; (8000a8c <main+0x2d0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <main+0x2e0>)
 8000908:	7859      	ldrb	r1, [r3, #1]
 800090a:	4b65      	ldr	r3, [pc, #404]	; (8000aa0 <main+0x2e4>)
 800090c:	5499      	strb	r1, [r3, r2]
					b++;
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <main+0x2d0>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <main+0x2d0>)
 8000918:	701a      	strb	r2, [r3, #0]
				for (i=0; i<4; i++)
 800091a:	4b5e      	ldr	r3, [pc, #376]	; (8000a94 <main+0x2d8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	3301      	adds	r3, #1
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b5c      	ldr	r3, [pc, #368]	; (8000a94 <main+0x2d8>)
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	4b5b      	ldr	r3, [pc, #364]	; (8000a94 <main+0x2d8>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d9d3      	bls.n	80008d6 <main+0x11a>
				 //Gửi thông tin mã thẻ lên máy tính theo frame đã quy ước
				 //Frame format $ INOUT RFIDCODE VTVALUEE @ VT là vị trí xe còn trống
           	   	 //Ex $ IN RFID123456 VT9E @

				//gửi Header
				rs485_print("$");
 800092e:	485d      	ldr	r0, [pc, #372]	; (8000aa4 <main+0x2e8>)
 8000930:	f7ff ff10 	bl	8000754 <rs485_print>

				//gửi trạng thái xe vào/ra
				if(!HAL_GPIO_ReadPin(CB_IN_GPIO_Port, CB_IN_Pin))
 8000934:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000938:	485b      	ldr	r0, [pc, #364]	; (8000aa8 <main+0x2ec>)
 800093a:	f001 faeb 	bl	8001f14 <HAL_GPIO_ReadPin>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d106      	bne.n	8000952 <main+0x196>
				{
					stt_in_out=IN;
 8000944:	4b59      	ldr	r3, [pc, #356]	; (8000aac <main+0x2f0>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
					rs485_print(" IN ");
 800094a:	4859      	ldr	r0, [pc, #356]	; (8000ab0 <main+0x2f4>)
 800094c:	f7ff ff02 	bl	8000754 <rs485_print>
 8000950:	e00d      	b.n	800096e <main+0x1b2>
				}
				else if(!HAL_GPIO_ReadPin(CB_OUT_GPIO_Port, CB_OUT_Pin))
 8000952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000956:	4854      	ldr	r0, [pc, #336]	; (8000aa8 <main+0x2ec>)
 8000958:	f001 fadc 	bl	8001f14 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d105      	bne.n	800096e <main+0x1b2>
				{
					rs485_print(" OUT ");
 8000962:	4854      	ldr	r0, [pc, #336]	; (8000ab4 <main+0x2f8>)
 8000964:	f7ff fef6 	bl	8000754 <rs485_print>
					stt_in_out=OUT;
 8000968:	4b50      	ldr	r3, [pc, #320]	; (8000aac <main+0x2f0>)
 800096a:	2202      	movs	r2, #2
 800096c:	701a      	strb	r2, [r3, #0]
				}

				rs485_print("RFID");
 800096e:	4852      	ldr	r0, [pc, #328]	; (8000ab8 <main+0x2fc>)
 8000970:	f7ff fef0 	bl	8000754 <rs485_print>

				//gửi mã thẻ RFID
				char *temp;
				for(int i=0;i<18;i++)
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	e018      	b.n	80009ac <main+0x1f0>
				{
					char txtTemp[2]="";
 800097a:	2300      	movs	r3, #0
 800097c:	803b      	strh	r3, [r7, #0]
					if(txBuffer[i]!=0)
 800097e:	4a48      	ldr	r2, [pc, #288]	; (8000aa0 <main+0x2e4>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00d      	beq.n	80009a6 <main+0x1ea>
					{
						sprintf(txtTemp,"%x",txBuffer[i]);
 800098a:	4a45      	ldr	r2, [pc, #276]	; (8000aa0 <main+0x2e4>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	463b      	mov	r3, r7
 8000996:	4949      	ldr	r1, [pc, #292]	; (8000abc <main+0x300>)
 8000998:	4618      	mov	r0, r3
 800099a:	f003 fe51 	bl	8004640 <siprintf>
						rs485_print(txtTemp);
 800099e:	463b      	mov	r3, r7
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fed7 	bl	8000754 <rs485_print>
				for(int i=0;i<18;i++)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3301      	adds	r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b11      	cmp	r3, #17
 80009b0:	dde3      	ble.n	800097a <main+0x1be>
					}
				}

				//gửi trạng thái 5 vị trí xe trong bãi
				rs485_print(" ");
 80009b2:	4843      	ldr	r0, [pc, #268]	; (8000ac0 <main+0x304>)
 80009b4:	f7ff fece 	bl	8000754 <rs485_print>
				char viTriXe=0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	70fb      	strb	r3, [r7, #3]
				if(!HAL_GPIO_ReadPin(VT1_GPIO_Port, VT1_Pin)) rs485_print("VT1ON"); else rs485_print("VT1OFF");//viTriXe|=0x01;
 80009bc:	2102      	movs	r1, #2
 80009be:	483a      	ldr	r0, [pc, #232]	; (8000aa8 <main+0x2ec>)
 80009c0:	f001 faa8 	bl	8001f14 <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d103      	bne.n	80009d2 <main+0x216>
 80009ca:	483e      	ldr	r0, [pc, #248]	; (8000ac4 <main+0x308>)
 80009cc:	f7ff fec2 	bl	8000754 <rs485_print>
 80009d0:	e002      	b.n	80009d8 <main+0x21c>
 80009d2:	483d      	ldr	r0, [pc, #244]	; (8000ac8 <main+0x30c>)
 80009d4:	f7ff febe 	bl	8000754 <rs485_print>
				if(!HAL_GPIO_ReadPin(VT2_GPIO_Port, VT2_Pin)) rs485_print("VT2ON"); else rs485_print("VT2OFF");//viTriXe|=0x02;
 80009d8:	2104      	movs	r1, #4
 80009da:	483c      	ldr	r0, [pc, #240]	; (8000acc <main+0x310>)
 80009dc:	f001 fa9a 	bl	8001f14 <HAL_GPIO_ReadPin>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d103      	bne.n	80009ee <main+0x232>
 80009e6:	483a      	ldr	r0, [pc, #232]	; (8000ad0 <main+0x314>)
 80009e8:	f7ff feb4 	bl	8000754 <rs485_print>
 80009ec:	e002      	b.n	80009f4 <main+0x238>
 80009ee:	4839      	ldr	r0, [pc, #228]	; (8000ad4 <main+0x318>)
 80009f0:	f7ff feb0 	bl	8000754 <rs485_print>
				if(!HAL_GPIO_ReadPin(VT3_GPIO_Port, VT3_Pin)) rs485_print("VT3ON"); else rs485_print("VT3OFF");//viTriXe|=0x04;
 80009f4:	2101      	movs	r1, #1
 80009f6:	4835      	ldr	r0, [pc, #212]	; (8000acc <main+0x310>)
 80009f8:	f001 fa8c 	bl	8001f14 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <main+0x24e>
 8000a02:	4835      	ldr	r0, [pc, #212]	; (8000ad8 <main+0x31c>)
 8000a04:	f7ff fea6 	bl	8000754 <rs485_print>
 8000a08:	e002      	b.n	8000a10 <main+0x254>
 8000a0a:	4834      	ldr	r0, [pc, #208]	; (8000adc <main+0x320>)
 8000a0c:	f7ff fea2 	bl	8000754 <rs485_print>
				if(!HAL_GPIO_ReadPin(VT4_GPIO_Port, VT4_Pin)) rs485_print("VT4ON"); else rs485_print("VT4OFF");//viTriXe|=0x08;
 8000a10:	2108      	movs	r1, #8
 8000a12:	482e      	ldr	r0, [pc, #184]	; (8000acc <main+0x310>)
 8000a14:	f001 fa7e 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d103      	bne.n	8000a26 <main+0x26a>
 8000a1e:	4830      	ldr	r0, [pc, #192]	; (8000ae0 <main+0x324>)
 8000a20:	f7ff fe98 	bl	8000754 <rs485_print>
 8000a24:	e002      	b.n	8000a2c <main+0x270>
 8000a26:	482f      	ldr	r0, [pc, #188]	; (8000ae4 <main+0x328>)
 8000a28:	f7ff fe94 	bl	8000754 <rs485_print>
				if(!HAL_GPIO_ReadPin(VT5_GPIO_Port, VT5_Pin)) rs485_print("VT5ON"); else rs485_print("VT5OFF");//viTriXe|=0x10;
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4827      	ldr	r0, [pc, #156]	; (8000acc <main+0x310>)
 8000a30:	f001 fa70 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d103      	bne.n	8000a42 <main+0x286>
 8000a3a:	482b      	ldr	r0, [pc, #172]	; (8000ae8 <main+0x32c>)
 8000a3c:	f7ff fe8a 	bl	8000754 <rs485_print>
 8000a40:	e002      	b.n	8000a48 <main+0x28c>
 8000a42:	482a      	ldr	r0, [pc, #168]	; (8000aec <main+0x330>)
 8000a44:	f7ff fe86 	bl	8000754 <rs485_print>

				rs485_print(" VTE\r\n",viTriXe);
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4828      	ldr	r0, [pc, #160]	; (8000af0 <main+0x334>)
 8000a4e:	f7ff fe81 	bl	8000754 <rs485_print>

				//đợi 1s sau mới đ�?c thẻ tiếp
				HAL_Delay(1000);
 8000a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a56:	f000 fef7 	bl	8001848 <HAL_Delay>
				count_fix=0;
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <main+0x338>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
				ok = 1;
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <main+0x33c>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
				for (i=0; i<8; i++) if (txBuffer[9+i] != memID[i]) ok = 0;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <main+0x2d8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
 8000a6c:	e05b      	b.n	8000b26 <main+0x36a>
 8000a6e:	bf00      	nop
 8000a70:	08004fc0 	.word	0x08004fc0
 8000a74:	08004fcc 	.word	0x08004fcc
 8000a78:	2000017c 	.word	0x2000017c
 8000a7c:	20000334 	.word	0x20000334
 8000a80:	20000108 	.word	0x20000108
 8000a84:	200000ea 	.word	0x200000ea
 8000a88:	200000ec 	.word	0x200000ec
 8000a8c:	200000eb 	.word	0x200000eb
 8000a90:	200000ed 	.word	0x200000ed
 8000a94:	200000e9 	.word	0x200000e9
 8000a98:	20000104 	.word	0x20000104
 8000a9c:	200000f8 	.word	0x200000f8
 8000aa0:	200000f0 	.word	0x200000f0
 8000aa4:	08004fd8 	.word	0x08004fd8
 8000aa8:	40010c00 	.word	0x40010c00
 8000aac:	200000e8 	.word	0x200000e8
 8000ab0:	08004fdc 	.word	0x08004fdc
 8000ab4:	08004fe4 	.word	0x08004fe4
 8000ab8:	08004fec 	.word	0x08004fec
 8000abc:	08004ff4 	.word	0x08004ff4
 8000ac0:	08004ff8 	.word	0x08004ff8
 8000ac4:	08004ffc 	.word	0x08004ffc
 8000ac8:	08005004 	.word	0x08005004
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	0800500c 	.word	0x0800500c
 8000ad4:	08005014 	.word	0x08005014
 8000ad8:	0800501c 	.word	0x0800501c
 8000adc:	08005024 	.word	0x08005024
 8000ae0:	0800502c 	.word	0x0800502c
 8000ae4:	08005034 	.word	0x08005034
 8000ae8:	0800503c 	.word	0x0800503c
 8000aec:	08005044 	.word	0x08005044
 8000af0:	0800504c 	.word	0x0800504c
 8000af4:	2000018c 	.word	0x2000018c
 8000af8:	200000ee 	.word	0x200000ee
 8000afc:	4b96      	ldr	r3, [pc, #600]	; (8000d58 <main+0x59c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	3309      	adds	r3, #9
 8000b02:	4a96      	ldr	r2, [pc, #600]	; (8000d5c <main+0x5a0>)
 8000b04:	5cd2      	ldrb	r2, [r2, r3]
 8000b06:	4b94      	ldr	r3, [pc, #592]	; (8000d58 <main+0x59c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4b94      	ldr	r3, [pc, #592]	; (8000d60 <main+0x5a4>)
 8000b0e:	5c5b      	ldrb	r3, [r3, r1]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d002      	beq.n	8000b1a <main+0x35e>
 8000b14:	4b93      	ldr	r3, [pc, #588]	; (8000d64 <main+0x5a8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	4b8f      	ldr	r3, [pc, #572]	; (8000d58 <main+0x59c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b8d      	ldr	r3, [pc, #564]	; (8000d58 <main+0x59c>)
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	4b8c      	ldr	r3, [pc, #560]	; (8000d58 <main+0x59c>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b07      	cmp	r3, #7
 8000b2c:	d9e6      	bls.n	8000afc <main+0x340>
			}
		}
	}//


	q++;
 8000b2e:	4b8e      	ldr	r3, [pc, #568]	; (8000d68 <main+0x5ac>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b8c      	ldr	r3, [pc, #560]	; (8000d68 <main+0x5ac>)
 8000b38:	701a      	strb	r2, [r3, #0]
	if (!q)
 8000b3a:	4b8b      	ldr	r3, [pc, #556]	; (8000d68 <main+0x5ac>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d116      	bne.n	8000b70 <main+0x3b4>
	{
		en = 1;								// Delay against scan kode
 8000b42:	4b8a      	ldr	r3, [pc, #552]	; (8000d6c <main+0x5b0>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++) lastID[i] = 0;	// Delay reading the same card 3s
 8000b48:	4b83      	ldr	r3, [pc, #524]	; (8000d58 <main+0x59c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e00b      	b.n	8000b68 <main+0x3ac>
 8000b50:	4b81      	ldr	r3, [pc, #516]	; (8000d58 <main+0x59c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b86      	ldr	r3, [pc, #536]	; (8000d70 <main+0x5b4>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	5499      	strb	r1, [r3, r2]
 8000b5c:	4b7e      	ldr	r3, [pc, #504]	; (8000d58 <main+0x59c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b7c      	ldr	r3, [pc, #496]	; (8000d58 <main+0x59c>)
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	4b7b      	ldr	r3, [pc, #492]	; (8000d58 <main+0x59c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d9ef      	bls.n	8000b50 <main+0x394>
	}


	//nháy led status
	if(count_led<10) count_led++;
 8000b70:	4b80      	ldr	r3, [pc, #512]	; (8000d74 <main+0x5b8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b09      	cmp	r3, #9
 8000b76:	d805      	bhi.n	8000b84 <main+0x3c8>
 8000b78:	4b7e      	ldr	r3, [pc, #504]	; (8000d74 <main+0x5b8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4a7d      	ldr	r2, [pc, #500]	; (8000d74 <main+0x5b8>)
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e053      	b.n	8000c2c <main+0x470>
	else
	{
		count_led=0;
 8000b84:	4b7b      	ldr	r3, [pc, #492]	; (8000d74 <main+0x5b8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8000b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8e:	487a      	ldr	r0, [pc, #488]	; (8000d78 <main+0x5bc>)
 8000b90:	f001 f9ef 	bl	8001f72 <HAL_GPIO_TogglePin>

		rs485_print("$");
 8000b94:	4879      	ldr	r0, [pc, #484]	; (8000d7c <main+0x5c0>)
 8000b96:	f7ff fddd 	bl	8000754 <rs485_print>
		if(!HAL_GPIO_ReadPin(VT1_GPIO_Port, VT1_Pin)) rs485_print("VT1ON"); else rs485_print("VT1OFF");//viTriXe|=0x01;
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4878      	ldr	r0, [pc, #480]	; (8000d80 <main+0x5c4>)
 8000b9e:	f001 f9b9 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d103      	bne.n	8000bb0 <main+0x3f4>
 8000ba8:	4876      	ldr	r0, [pc, #472]	; (8000d84 <main+0x5c8>)
 8000baa:	f7ff fdd3 	bl	8000754 <rs485_print>
 8000bae:	e002      	b.n	8000bb6 <main+0x3fa>
 8000bb0:	4875      	ldr	r0, [pc, #468]	; (8000d88 <main+0x5cc>)
 8000bb2:	f7ff fdcf 	bl	8000754 <rs485_print>
		if(!HAL_GPIO_ReadPin(VT2_GPIO_Port, VT2_Pin)) rs485_print("VT2ON"); else rs485_print("VT2OFF");//viTriXe|=0x02;
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	4874      	ldr	r0, [pc, #464]	; (8000d8c <main+0x5d0>)
 8000bba:	f001 f9ab 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d103      	bne.n	8000bcc <main+0x410>
 8000bc4:	4872      	ldr	r0, [pc, #456]	; (8000d90 <main+0x5d4>)
 8000bc6:	f7ff fdc5 	bl	8000754 <rs485_print>
 8000bca:	e002      	b.n	8000bd2 <main+0x416>
 8000bcc:	4871      	ldr	r0, [pc, #452]	; (8000d94 <main+0x5d8>)
 8000bce:	f7ff fdc1 	bl	8000754 <rs485_print>
		if(!HAL_GPIO_ReadPin(VT3_GPIO_Port, VT3_Pin)) rs485_print("VT3ON"); else rs485_print("VT3OFF");//viTriXe|=0x04;
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	486d      	ldr	r0, [pc, #436]	; (8000d8c <main+0x5d0>)
 8000bd6:	f001 f99d 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d103      	bne.n	8000be8 <main+0x42c>
 8000be0:	486d      	ldr	r0, [pc, #436]	; (8000d98 <main+0x5dc>)
 8000be2:	f7ff fdb7 	bl	8000754 <rs485_print>
 8000be6:	e002      	b.n	8000bee <main+0x432>
 8000be8:	486c      	ldr	r0, [pc, #432]	; (8000d9c <main+0x5e0>)
 8000bea:	f7ff fdb3 	bl	8000754 <rs485_print>
		if(!HAL_GPIO_ReadPin(VT4_GPIO_Port, VT4_Pin)) rs485_print("VT4ON"); else rs485_print("VT4OFF");//viTriXe|=0x08;
 8000bee:	2108      	movs	r1, #8
 8000bf0:	4866      	ldr	r0, [pc, #408]	; (8000d8c <main+0x5d0>)
 8000bf2:	f001 f98f 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d103      	bne.n	8000c04 <main+0x448>
 8000bfc:	4868      	ldr	r0, [pc, #416]	; (8000da0 <main+0x5e4>)
 8000bfe:	f7ff fda9 	bl	8000754 <rs485_print>
 8000c02:	e002      	b.n	8000c0a <main+0x44e>
 8000c04:	4867      	ldr	r0, [pc, #412]	; (8000da4 <main+0x5e8>)
 8000c06:	f7ff fda5 	bl	8000754 <rs485_print>
		if(!HAL_GPIO_ReadPin(VT5_GPIO_Port, VT5_Pin)) rs485_print("VT5ON"); else rs485_print("VT5OFF");//viTriXe|=0x10;
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	485f      	ldr	r0, [pc, #380]	; (8000d8c <main+0x5d0>)
 8000c0e:	f001 f981 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d103      	bne.n	8000c20 <main+0x464>
 8000c18:	4863      	ldr	r0, [pc, #396]	; (8000da8 <main+0x5ec>)
 8000c1a:	f7ff fd9b 	bl	8000754 <rs485_print>
 8000c1e:	e002      	b.n	8000c26 <main+0x46a>
 8000c20:	4862      	ldr	r0, [pc, #392]	; (8000dac <main+0x5f0>)
 8000c22:	f7ff fd97 	bl	8000754 <rs485_print>
		rs485_print("E\r\n");
 8000c26:	4862      	ldr	r0, [pc, #392]	; (8000db0 <main+0x5f4>)
 8000c28:	f7ff fd94 	bl	8000754 <rs485_print>

	//đi�?u khiển barie khi thẻ đúng/sai
	/*
	 * Nếu xe đi vào
	 */
	if(stt_in_out==IN)
 8000c2c:	4b61      	ldr	r3, [pc, #388]	; (8000db4 <main+0x5f8>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d144      	bne.n	8000cbe <main+0x502>
	{
		/*
		 *	Nếu máy tính trả v�? kết quả thẻ là hơp lệ, máy tính sẽ gửi ký tự T (true), nếu mã thẻ là sai máy tính sẽ gửi ký tự là F (false)
		 *	uart_char_rec là biến lưu ký tự máy tính gửi xuống
		 */
		if(uart_char_rec=='T')
 8000c34:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <main+0x5fc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b54      	cmp	r3, #84	; 0x54
 8000c3a:	d11b      	bne.n	8000c74 <main+0x4b8>
		{
			lcd_clear();
 8000c3c:	f7ff fc5f 	bl	80004fe <lcd_clear>
			lcd_string(1, 4, "THE DUNG");
 8000c40:	4a5e      	ldr	r2, [pc, #376]	; (8000dbc <main+0x600>)
 8000c42:	2104      	movs	r1, #4
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff fc9d 	bl	8000584 <lcd_string>
			servo(SERVO1,PUSH);
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fcaf 	bl	80005b0 <servo>
			servo(SERVO2,WAIT2);
 8000c52:	2102      	movs	r1, #2
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff fcab 	bl	80005b0 <servo>
			HAL_Delay(3000);
 8000c5a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c5e:	f000 fdf3 	bl	8001848 <HAL_Delay>
			servo(SERVO1,WAIT);
 8000c62:	2103      	movs	r1, #3
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fca3 	bl	80005b0 <servo>
			servo(SERVO2,WAIT2);
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff fc9f 	bl	80005b0 <servo>
 8000c72:	e016      	b.n	8000ca2 <main+0x4e6>

		}
		else if(uart_char_rec=='F')
 8000c74:	4b50      	ldr	r3, [pc, #320]	; (8000db8 <main+0x5fc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b46      	cmp	r3, #70	; 0x46
 8000c7a:	d112      	bne.n	8000ca2 <main+0x4e6>
		{
			lcd_clear();
 8000c7c:	f7ff fc3f 	bl	80004fe <lcd_clear>
			lcd_string(1, 4, "THE SAI");
 8000c80:	4a4f      	ldr	r2, [pc, #316]	; (8000dc0 <main+0x604>)
 8000c82:	2104      	movs	r1, #4
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff fc7d 	bl	8000584 <lcd_string>
			servo(SERVO1,WAIT);
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fc8f 	bl	80005b0 <servo>
			servo(SERVO2,WAIT2);
 8000c92:	2102      	movs	r1, #2
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff fc8b 	bl	80005b0 <servo>
			HAL_Delay(3000);
 8000c9a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c9e:	f000 fdd3 	bl	8001848 <HAL_Delay>
		}
		lcd_string(1, 4, "BAI DO XE");
 8000ca2:	4a48      	ldr	r2, [pc, #288]	; (8000dc4 <main+0x608>)
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fc6c 	bl	8000584 <lcd_string>
		lcd_string(2, 4, "WELL COME");
 8000cac:	4a46      	ldr	r2, [pc, #280]	; (8000dc8 <main+0x60c>)
 8000cae:	2104      	movs	r1, #4
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f7ff fc67 	bl	8000584 <lcd_string>
		uart_char_rec=0;
 8000cb6:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <main+0x5fc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e047      	b.n	8000d4e <main+0x592>
	}
	/*
	 * Nếu xe đi ra
	 */
	else if(stt_in_out==OUT)
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <main+0x5f8>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d143      	bne.n	8000d4e <main+0x592>
	{
		if(uart_char_rec=='T')
 8000cc6:	4b3c      	ldr	r3, [pc, #240]	; (8000db8 <main+0x5fc>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b54      	cmp	r3, #84	; 0x54
 8000ccc:	d11b      	bne.n	8000d06 <main+0x54a>
		{
			lcd_clear();
 8000cce:	f7ff fc16 	bl	80004fe <lcd_clear>
			lcd_string(1, 4, "THE DUNG");
 8000cd2:	4a3a      	ldr	r2, [pc, #232]	; (8000dbc <main+0x600>)
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f7ff fc54 	bl	8000584 <lcd_string>
			servo(SERVO1,WAIT);
 8000cdc:	2103      	movs	r1, #3
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff fc66 	bl	80005b0 <servo>
			servo(SERVO2,PUSH2);
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fc62 	bl	80005b0 <servo>
			HAL_Delay(3000);
 8000cec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cf0:	f000 fdaa 	bl	8001848 <HAL_Delay>
			servo(SERVO1,WAIT);
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff fc5a 	bl	80005b0 <servo>
			servo(SERVO2,WAIT2);
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff fc56 	bl	80005b0 <servo>
 8000d04:	e016      	b.n	8000d34 <main+0x578>
		}
		else if(uart_char_rec=='F')
 8000d06:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <main+0x5fc>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b46      	cmp	r3, #70	; 0x46
 8000d0c:	d112      	bne.n	8000d34 <main+0x578>
		{
			lcd_clear();
 8000d0e:	f7ff fbf6 	bl	80004fe <lcd_clear>
			lcd_string(1, 4, "THE SAI");
 8000d12:	4a2b      	ldr	r2, [pc, #172]	; (8000dc0 <main+0x604>)
 8000d14:	2104      	movs	r1, #4
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff fc34 	bl	8000584 <lcd_string>
			servo(SERVO1,WAIT);
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff fc46 	bl	80005b0 <servo>
			servo(SERVO2,WAIT2);
 8000d24:	2102      	movs	r1, #2
 8000d26:	2001      	movs	r0, #1
 8000d28:	f7ff fc42 	bl	80005b0 <servo>
			HAL_Delay(3000);
 8000d2c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d30:	f000 fd8a 	bl	8001848 <HAL_Delay>
		}
		lcd_string(1, 4, "BAI DO XE");
 8000d34:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <main+0x608>)
 8000d36:	2104      	movs	r1, #4
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fc23 	bl	8000584 <lcd_string>
		lcd_string(2, 4, "WELL COME");
 8000d3e:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <main+0x60c>)
 8000d40:	2104      	movs	r1, #4
 8000d42:	2002      	movs	r0, #2
 8000d44:	f7ff fc1e 	bl	8000584 <lcd_string>
		uart_char_rec=0;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <main+0x5fc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
	}

    HAL_Delay(5);
 8000d4e:	2005      	movs	r0, #5
 8000d50:	f000 fd7a 	bl	8001848 <HAL_Delay>
	if (!MFRC522_Request(PICC_REQIDL, str))
 8000d54:	e565      	b.n	8000822 <main+0x66>
 8000d56:	bf00      	nop
 8000d58:	200000e9 	.word	0x200000e9
 8000d5c:	200000f0 	.word	0x200000f0
 8000d60:	20000000 	.word	0x20000000
 8000d64:	200000ee 	.word	0x200000ee
 8000d68:	200000ec 	.word	0x200000ec
 8000d6c:	200000ed 	.word	0x200000ed
 8000d70:	20000104 	.word	0x20000104
 8000d74:	20000188 	.word	0x20000188
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	08004fd8 	.word	0x08004fd8
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	08004ffc 	.word	0x08004ffc
 8000d88:	08005004 	.word	0x08005004
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	0800500c 	.word	0x0800500c
 8000d94:	08005014 	.word	0x08005014
 8000d98:	0800501c 	.word	0x0800501c
 8000d9c:	08005024 	.word	0x08005024
 8000da0:	0800502c 	.word	0x0800502c
 8000da4:	08005034 	.word	0x08005034
 8000da8:	0800503c 	.word	0x0800503c
 8000dac:	08005044 	.word	0x08005044
 8000db0:	08005054 	.word	0x08005054
 8000db4:	200000e8 	.word	0x200000e8
 8000db8:	2000017c 	.word	0x2000017c
 8000dbc:	08005058 	.word	0x08005058
 8000dc0:	08005064 	.word	0x08005064
 8000dc4:	08004fc0 	.word	0x08004fc0
 8000dc8:	08004fcc 	.word	0x08004fcc

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b090      	sub	sp, #64	; 0x40
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2228      	movs	r2, #40	; 0x28
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fc28 	bl	8004630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df2:	2301      	movs	r3, #1
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df6:	2310      	movs	r3, #16
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e02:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fd13 	bl	8002838 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e18:	f000 f84e 	bl	8000eb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2102      	movs	r1, #2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 ff80 	bl	8002d3c <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e42:	f000 f839 	bl	8000eb8 <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3740      	adds	r7, #64	; 0x40
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <char_to_hex>:
	return number;
}

// char number to string hex (FF) (Only big letters!)
void char_to_hex(uint8_t data)
{
 8000e50:	b490      	push	{r4, r7}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	uint8_t digits[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <char_to_hex+0x60>)
 8000e5c:	f107 0408 	add.w	r4, r7, #8
 8000e60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (data < 16)
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <char_to_hex+0x32>
	{
		retstr[0] = '0';
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <char_to_hex+0x64>)
 8000e6e:	2230      	movs	r2, #48	; 0x30
 8000e70:	701a      	strb	r2, [r3, #0]
		retstr[1] = digits[data];
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	3318      	adds	r3, #24
 8000e76:	443b      	add	r3, r7
 8000e78:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <char_to_hex+0x64>)
 8000e7e:	705a      	strb	r2, [r3, #1]
	} else {
		retstr[0] = digits[(data & 0xF0)>>4];
		retstr[1] = digits[(data & 0x0F)];
	}
}
 8000e80:	e011      	b.n	8000ea6 <char_to_hex+0x56>
		retstr[0] = digits[(data & 0xF0)>>4];
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	3318      	adds	r3, #24
 8000e8a:	443b      	add	r3, r7
 8000e8c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <char_to_hex+0x64>)
 8000e92:	701a      	strb	r2, [r3, #0]
		retstr[1] = digits[(data & 0x0F)];
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3318      	adds	r3, #24
 8000e9c:	443b      	add	r3, r7
 8000e9e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <char_to_hex+0x64>)
 8000ea4:	705a      	strb	r2, [r3, #1]
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc90      	pop	{r4, r7}
 8000eae:	4770      	bx	lr
 8000eb0:	0800506c 	.word	0x0800506c
 8000eb4:	200000f8 	.word	0x200000f8

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000ed2:	f107 0208 	add.w	r2, r7, #8
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	230a      	movs	r3, #10
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <SPI1SendByte+0x2c>)
 8000ee2:	f002 f947 	bl	8003174 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000ee6:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000290 	.word	0x20000290

08000ef4 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000f04:	2200      	movs	r2, #0
 8000f06:	2101      	movs	r1, #1
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <SPI1_WriteReg+0x3c>)
 8000f0a:	f001 f81a 	bl	8001f42 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ffd7 	bl	8000ec4 <SPI1SendByte>
	SPI1SendByte(value);
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffd3 	bl	8000ec4 <SPI1SendByte>
	cs_set();
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2101      	movs	r1, #1
 8000f22:	4803      	ldr	r0, [pc, #12]	; (8000f30 <SPI1_WriteReg+0x3c>)
 8000f24:	f001 f80d 	bl	8001f42 <HAL_GPIO_WritePin>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40010c00 	.word	0x40010c00

08000f34 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2101      	movs	r1, #1
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <SPI1_ReadReg+0x3c>)
 8000f44:	f000 fffd 	bl	8001f42 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffba 	bl	8000ec4 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff ffb7 	bl	8000ec4 <SPI1SendByte>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <SPI1_ReadReg+0x3c>)
 8000f60:	f000 ffef 	bl	8001f42 <HAL_GPIO_WritePin>
	return val;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40010c00 	.word	0x40010c00

08000f74 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f8e:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000f90:	79ba      	ldrb	r2, [r7, #6]
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffac 	bl	8000ef4 <SPI1_WriteReg>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ffb5 	bl	8000f34 <SPI1_ReadReg>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
	return val;	
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffda 	bl	8000fa4 <MFRC522_ReadRegister>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffb8 	bl	8000f74 <MFRC522_WriteRegister>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ffc0 	bl	8000fa4 <MFRC522_ReadRegister>
 8001024:	4603      	mov	r3, r0
 8001026:	b25a      	sxtb	r2, r3
 8001028:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800102c:	43db      	mvns	r3, r3
 800102e:	b25b      	sxtb	r3, r3
 8001030:	4013      	ands	r3, r2
 8001032:	b25b      	sxtb	r3, r3
 8001034:	b2da      	uxtb	r2, r3
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff9a 	bl	8000f74 <MFRC522_WriteRegister>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8001054:	2107      	movs	r1, #7
 8001056:	200d      	movs	r0, #13
 8001058:	f7ff ff8c 	bl	8000f74 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2201      	movs	r2, #1
 800106c:	6839      	ldr	r1, [r7, #0]
 800106e:	200c      	movs	r0, #12
 8001070:	f000 f80f 	bl	8001092 <MFRC522_ToCard>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <MFRC522_Request+0x3c>
 800107e:	89bb      	ldrh	r3, [r7, #12]
 8001080:	2b10      	cmp	r3, #16
 8001082:	d001      	beq.n	8001088 <MFRC522_Request+0x40>
 8001084:	2302      	movs	r3, #2
 8001086:	73fb      	strb	r3, [r7, #15]
	return status;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001092:	b590      	push	{r4, r7, lr}
 8001094:	b087      	sub	sp, #28
 8001096:	af00      	add	r7, sp, #0
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	4613      	mov	r3, r2
 80010a2:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80010a4:	2302      	movs	r3, #2
 80010a6:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b0c      	cmp	r3, #12
 80010b4:	d006      	beq.n	80010c4 <MFRC522_ToCard+0x32>
 80010b6:	2b0e      	cmp	r3, #14
 80010b8:	d109      	bne.n	80010ce <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80010ba:	2312      	movs	r3, #18
 80010bc:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80010be:	2310      	movs	r3, #16
 80010c0:	757b      	strb	r3, [r7, #21]
			break;
 80010c2:	e005      	b.n	80010d0 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80010c4:	2377      	movs	r3, #119	; 0x77
 80010c6:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80010c8:	2330      	movs	r3, #48	; 0x30
 80010ca:	757b      	strb	r3, [r7, #21]
			break;
 80010cc:	e000      	b.n	80010d0 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 80010ce:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80010d0:	7dbb      	ldrb	r3, [r7, #22]
 80010d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff ff4a 	bl	8000f74 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	2004      	movs	r0, #4
 80010e4:	f7ff ff92 	bl	800100c <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	200a      	movs	r0, #10
 80010ec:	f7ff ff74 	bl	8000fd8 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80010f0:	2100      	movs	r1, #0
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff ff3e 	bl	8000f74 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80010f8:	2300      	movs	r3, #0
 80010fa:	827b      	strh	r3, [r7, #18]
 80010fc:	e00a      	b.n	8001114 <MFRC522_ToCard+0x82>
 80010fe:	8a7b      	ldrh	r3, [r7, #18]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	2009      	movs	r0, #9
 800110a:	f7ff ff33 	bl	8000f74 <MFRC522_WriteRegister>
 800110e:	8a7b      	ldrh	r3, [r7, #18]
 8001110:	3301      	adds	r3, #1
 8001112:	827b      	strh	r3, [r7, #18]
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	b29b      	uxth	r3, r3
 8001118:	8a7a      	ldrh	r2, [r7, #18]
 800111a:	429a      	cmp	r2, r3
 800111c:	d3ef      	bcc.n	80010fe <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	4619      	mov	r1, r3
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff ff26 	bl	8000f74 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b0c      	cmp	r3, #12
 800112c:	d103      	bne.n	8001136 <MFRC522_ToCard+0xa4>
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	200d      	movs	r0, #13
 8001132:	f7ff ff51 	bl	8000fd8 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001136:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800113a:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800113c:	2004      	movs	r0, #4
 800113e:	f7ff ff31 	bl	8000fa4 <MFRC522_ReadRegister>
 8001142:	4603      	mov	r3, r0
 8001144:	753b      	strb	r3, [r7, #20]
		i--;
 8001146:	8a7b      	ldrh	r3, [r7, #18]
 8001148:	3b01      	subs	r3, #1
 800114a:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800114c:	8a7b      	ldrh	r3, [r7, #18]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00a      	beq.n	8001168 <MFRC522_ToCard+0xd6>
 8001152:	7d3b      	ldrb	r3, [r7, #20]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d105      	bne.n	8001168 <MFRC522_ToCard+0xd6>
 800115c:	7d3a      	ldrb	r2, [r7, #20]
 800115e:	7d7b      	ldrb	r3, [r7, #21]
 8001160:	4013      	ands	r3, r2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0e9      	beq.n	800113c <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	200d      	movs	r0, #13
 800116c:	f7ff ff4e 	bl	800100c <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001170:	8a7b      	ldrh	r3, [r7, #18]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d057      	beq.n	8001226 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001176:	2006      	movs	r0, #6
 8001178:	f7ff ff14 	bl	8000fa4 <MFRC522_ReadRegister>
 800117c:	4603      	mov	r3, r0
 800117e:	f003 031b 	and.w	r3, r3, #27
 8001182:	2b00      	cmp	r3, #0
 8001184:	d14d      	bne.n	8001222 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 800118a:	7d3a      	ldrb	r2, [r7, #20]
 800118c:	7dbb      	ldrb	r3, [r7, #22]
 800118e:	4013      	ands	r3, r2
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MFRC522_ToCard+0x10c>
 800119a:	2301      	movs	r3, #1
 800119c:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	d140      	bne.n	8001226 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f7ff fefd 	bl	8000fa4 <MFRC522_ReadRegister>
 80011aa:	4603      	mov	r3, r0
 80011ac:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80011ae:	200c      	movs	r0, #12
 80011b0:	f7ff fef8 	bl	8000fa4 <MFRC522_ReadRegister>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 80011bc:	7c7b      	ldrb	r3, [r7, #17]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <MFRC522_ToCard+0x148>
 80011c2:	7d3b      	ldrb	r3, [r7, #20]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	7c7b      	ldrb	r3, [r7, #17]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	801a      	strh	r2, [r3, #0]
 80011d8:	e005      	b.n	80011e6 <MFRC522_ToCard+0x154>
 80011da:	7d3b      	ldrb	r3, [r7, #20]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 80011e6:	7d3b      	ldrb	r3, [r7, #20]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <MFRC522_ToCard+0x15e>
 80011ec:	2301      	movs	r3, #1
 80011ee:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 80011f0:	7d3b      	ldrb	r3, [r7, #20]
 80011f2:	2b10      	cmp	r3, #16
 80011f4:	d901      	bls.n	80011fa <MFRC522_ToCard+0x168>
 80011f6:	2310      	movs	r3, #16
 80011f8:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 80011fa:	2300      	movs	r3, #0
 80011fc:	827b      	strh	r3, [r7, #18]
 80011fe:	e00a      	b.n	8001216 <MFRC522_ToCard+0x184>
 8001200:	8a7b      	ldrh	r3, [r7, #18]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	18d4      	adds	r4, r2, r3
 8001206:	2009      	movs	r0, #9
 8001208:	f7ff fecc 	bl	8000fa4 <MFRC522_ReadRegister>
 800120c:	4603      	mov	r3, r0
 800120e:	7023      	strb	r3, [r4, #0]
 8001210:	8a7b      	ldrh	r3, [r7, #18]
 8001212:	3301      	adds	r3, #1
 8001214:	827b      	strh	r3, [r7, #18]
 8001216:	7d3b      	ldrb	r3, [r7, #20]
 8001218:	b29b      	uxth	r3, r3
 800121a:	8a7a      	ldrh	r2, [r7, #18]
 800121c:	429a      	cmp	r2, r3
 800121e:	d3ef      	bcc.n	8001200 <MFRC522_ToCard+0x16e>
 8001220:	e001      	b.n	8001226 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8001222:	2302      	movs	r3, #2
 8001224:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001226:	7dfb      	ldrb	r3, [r7, #23]
}
 8001228:	4618      	mov	r0, r3
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}

08001230 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af02      	add	r7, sp, #8
 8001236:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 800123c:	2100      	movs	r1, #0
 800123e:	200d      	movs	r0, #13
 8001240:	f7ff fe98 	bl	8000f74 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2293      	movs	r2, #147	; 0x93
 8001248:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3301      	adds	r3, #1
 800124e:	2220      	movs	r2, #32
 8001250:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001252:	f107 030a 	add.w	r3, r7, #10
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2202      	movs	r2, #2
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	200c      	movs	r0, #12
 8001260:	f7ff ff17 	bl	8001092 <MFRC522_ToCard>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d118      	bne.n	80012a0 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800126e:	2300      	movs	r3, #0
 8001270:	73bb      	strb	r3, [r7, #14]
 8001272:	e009      	b.n	8001288 <MFRC522_Anticoll+0x58>
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	4053      	eors	r3, r2
 8001280:	737b      	strb	r3, [r7, #13]
 8001282:	7bbb      	ldrb	r3, [r7, #14]
 8001284:	3301      	adds	r3, #1
 8001286:	73bb      	strb	r3, [r7, #14]
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d9f2      	bls.n	8001274 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800128e:	7bbb      	ldrb	r3, [r7, #14]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	7b7a      	ldrb	r2, [r7, #13]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <MFRC522_Anticoll+0x70>
 800129c:	2302      	movs	r3, #2
 800129e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
} 
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 80012ae:	f000 f820 	bl	80012f2 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80012b2:	218d      	movs	r1, #141	; 0x8d
 80012b4:	202a      	movs	r0, #42	; 0x2a
 80012b6:	f7ff fe5d 	bl	8000f74 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80012ba:	213e      	movs	r1, #62	; 0x3e
 80012bc:	202b      	movs	r0, #43	; 0x2b
 80012be:	f7ff fe59 	bl	8000f74 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 80012c2:	211e      	movs	r1, #30
 80012c4:	202d      	movs	r0, #45	; 0x2d
 80012c6:	f7ff fe55 	bl	8000f74 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80012ca:	2100      	movs	r1, #0
 80012cc:	202c      	movs	r0, #44	; 0x2c
 80012ce:	f7ff fe51 	bl	8000f74 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 80012d2:	2170      	movs	r1, #112	; 0x70
 80012d4:	2026      	movs	r0, #38	; 0x26
 80012d6:	f7ff fe4d 	bl	8000f74 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	2015      	movs	r0, #21
 80012de:	f7ff fe49 	bl	8000f74 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80012e2:	213d      	movs	r1, #61	; 0x3d
 80012e4:	2011      	movs	r0, #17
 80012e6:	f7ff fe45 	bl	8000f74 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 80012ea:	f000 f80a 	bl	8001302 <MFRC522_AntennaOn>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80012f6:	210f      	movs	r1, #15
 80012f8:	2001      	movs	r0, #1
 80012fa:	f7ff fe3b 	bl	8000f74 <MFRC522_WriteRegister>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}

08001302 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001308:	2014      	movs	r0, #20
 800130a:	f7ff fe4b 	bl	8000fa4 <MFRC522_ReadRegister>
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d103      	bne.n	8001324 <MFRC522_AntennaOn+0x22>
 800131c:	2103      	movs	r1, #3
 800131e:	2014      	movs	r0, #20
 8001320:	f7ff fe5a 	bl	8000fd8 <MFRC522_SetBitMask>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_SPI1_Init+0x64>)
 8001332:	4a18      	ldr	r2, [pc, #96]	; (8001394 <MX_SPI1_Init+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_SPI1_Init+0x64>)
 8001338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800133c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_SPI1_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_SPI1_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_SPI1_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_SPI1_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_SPI1_Init+0x64>)
 8001358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_SPI1_Init+0x64>)
 8001360:	2210      	movs	r2, #16
 8001362:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <MX_SPI1_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SPI1_Init+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_SPI1_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SPI1_Init+0x64>)
 8001378:	220a      	movs	r2, #10
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_SPI1_Init+0x64>)
 800137e:	f001 fe75 	bl	800306c <HAL_SPI_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001388:	f7ff fd96 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000290 	.word	0x20000290
 8001394:	40013000 	.word	0x40013000

08001398 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_SPI_MspInit+0x88>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d12f      	bne.n	8001418 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_SPI_MspInit+0x8c>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a19      	ldr	r2, [pc, #100]	; (8001424 <HAL_SPI_MspInit+0x8c>)
 80013be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_SPI_MspInit+0x8c>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_SPI_MspInit+0x8c>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a13      	ldr	r2, [pc, #76]	; (8001424 <HAL_SPI_MspInit+0x8c>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_SPI_MspInit+0x8c>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013e8:	23a0      	movs	r3, #160	; 0xa0
 80013ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4619      	mov	r1, r3
 80013fa:	480b      	ldr	r0, [pc, #44]	; (8001428 <HAL_SPI_MspInit+0x90>)
 80013fc:	f000 fc06 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001400:	2340      	movs	r3, #64	; 0x40
 8001402:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4619      	mov	r1, r3
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_SPI_MspInit+0x90>)
 8001414:	f000 fbfa 	bl	8001c0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001418:	bf00      	nop
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40013000 	.word	0x40013000
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_MspInit+0x5c>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_MspInit+0x5c>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6193      	str	r3, [r2, #24]
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_MspInit+0x5c>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_MspInit+0x5c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_MspInit+0x5c>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_MspInit+0x5c>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_MspInit+0x60>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_MspInit+0x60>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d6:	f000 f99b 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <USART1_IRQHandler+0x10>)
 80014e6:	f002 fc51 	bl	8003d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000334 	.word	0x20000334

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f003 f85a 	bl	80045dc <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20005000 	.word	0x20005000
 8001554:	00000400 	.word	0x00000400
 8001558:	200002e8 	.word	0x200002e8
 800155c:	20000390 	.word	0x20000390

08001560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM2_Init+0x94>)
 800158a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM2_Init+0x94>)
 8001592:	223f      	movs	r2, #63	; 0x3f
 8001594:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM2_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM2_Init+0x94>)
 800159e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM2_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM2_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_TIM2_Init+0x94>)
 80015b2:	f002 f827 	bl	8003604 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015bc:	f7ff fc7c 	bl	8000eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_TIM2_Init+0x94>)
 80015ce:	f002 f8b3 	bl	8003738 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015d8:	f7ff fc6e 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_TIM2_Init+0x94>)
 80015ea:	f002 fa61 	bl	8003ab0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015f4:	f7ff fc60 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200002ec 	.word	0x200002ec

08001604 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001614:	d10b      	bne.n	800162e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_TIM_Base_MspInit+0x34>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_TIM_Base_MspInit+0x34>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_TIM_Base_MspInit+0x34>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40021000 	.word	0x40021000

0800163c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <MX_USART1_UART_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001674:	f002 fa7a 	bl	8003b6c <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800167e:	f7ff fc1b 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000334 	.word	0x20000334
 800168c:	40013800 	.word	0x40013800

08001690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a20      	ldr	r2, [pc, #128]	; (800172c <HAL_UART_MspInit+0x9c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d139      	bne.n	8001724 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <HAL_UART_MspInit+0xa0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_UART_MspInit+0xa0>)
 80016b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_UART_MspInit+0xa0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_UART_MspInit+0xa0>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a18      	ldr	r2, [pc, #96]	; (8001730 <HAL_UART_MspInit+0xa0>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_UART_MspInit+0xa0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4619      	mov	r1, r3
 80016f4:	480f      	ldr	r0, [pc, #60]	; (8001734 <HAL_UART_MspInit+0xa4>)
 80016f6:	f000 fa89 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4619      	mov	r1, r3
 800170e:	4809      	ldr	r0, [pc, #36]	; (8001734 <HAL_UART_MspInit+0xa4>)
 8001710:	f000 fa7c 	bl	8001c0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2025      	movs	r0, #37	; 0x25
 800171a:	f000 f990 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800171e:	2025      	movs	r0, #37	; 0x25
 8001720:	f000 f9a9 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001724:	bf00      	nop
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40013800 	.word	0x40013800
 8001730:	40021000 	.word	0x40021000
 8001734:	40010800 	.word	0x40010800

08001738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173a:	490d      	ldr	r1, [pc, #52]	; (8001770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001740:	e002      	b.n	8001748 <LoopCopyDataInit>

08001742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001746:	3304      	adds	r3, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800174c:	d3f9      	bcc.n	8001742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001750:	4c0a      	ldr	r4, [pc, #40]	; (800177c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001754:	e001      	b.n	800175a <LoopFillZerobss>

08001756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001758:	3204      	adds	r2, #4

0800175a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800175e:	f7ff feff 	bl	8001560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001762:	f002 ff41 	bl	80045e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001766:	f7ff f829 	bl	80007bc <main>
  bx lr
 800176a:	4770      	bx	lr
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001774:	080050e0 	.word	0x080050e0
  ldr r2, =_sbss
 8001778:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800177c:	2000038c 	.word	0x2000038c

08001780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC1_2_IRQHandler>
	...

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_Init+0x28>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_Init+0x28>)
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 f947 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179a:	200f      	movs	r0, #15
 800179c:	f000 f808 	bl	80017b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a0:	f7ff fe44 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40022000 	.word	0x40022000

080017b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_InitTick+0x54>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x58>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f95f 	bl	8001a92 <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e00e      	b.n	80017fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d80a      	bhi.n	80017fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e4:	2200      	movs	r2, #0
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f000 f927 	bl	8001a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <HAL_InitTick+0x5c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000008 	.word	0x20000008
 8001808:	20000010 	.word	0x20000010
 800180c:	2000000c 	.word	0x2000000c

08001810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_IncTick+0x1c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x20>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a03      	ldr	r2, [pc, #12]	; (8001830 <HAL_IncTick+0x20>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20000010 	.word	0x20000010
 8001830:	20000378 	.word	0x20000378

08001834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <HAL_GetTick+0x10>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	20000378 	.word	0x20000378

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff fff0 	bl	8001834 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffe0 	bl	8001834 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000010 	.word	0x20000010

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4906      	ldr	r1, [pc, #24]	; (8001928 <__NVIC_EnableIRQ+0x34>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f7ff ff90 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff2d 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff42 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff90 	bl	8001980 <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5f 	bl	800192c <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff35 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa2 	bl	80019e4 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d008      	beq.n	8001ad2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e020      	b.n	8001b14 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 020e 	bic.w	r2, r2, #14
 8001ae0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0201 	bic.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	2101      	movs	r1, #1
 8001afc:	fa01 f202 	lsl.w	r2, r1, r2
 8001b00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d005      	beq.n	8001b42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e051      	b.n	8001be6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 020e 	bic.w	r2, r2, #14
 8001b50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <HAL_DMA_Abort_IT+0xd0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d029      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xa0>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <HAL_DMA_Abort_IT+0xd4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d022      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x9c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <HAL_DMA_Abort_IT+0xd8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d01a      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x96>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_DMA_Abort_IT+0xdc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d012      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x90>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <HAL_DMA_Abort_IT+0xe0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00a      	beq.n	8001baa <HAL_DMA_Abort_IT+0x8a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <HAL_DMA_Abort_IT+0xe4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d102      	bne.n	8001ba4 <HAL_DMA_Abort_IT+0x84>
 8001b9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ba2:	e00e      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba8:	e00b      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bae:	e008      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb4:	e005      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bba:	e002      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	e000      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_DMA_Abort_IT+0xe8>)
 8001bc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
    } 
  }
  return status;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40020008 	.word	0x40020008
 8001bf4:	4002001c 	.word	0x4002001c
 8001bf8:	40020030 	.word	0x40020030
 8001bfc:	40020044 	.word	0x40020044
 8001c00:	40020058 	.word	0x40020058
 8001c04:	4002006c 	.word	0x4002006c
 8001c08:	40020000 	.word	0x40020000

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	e169      	b.n	8001ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c20:	2201      	movs	r2, #1
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 8158 	bne.w	8001eee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a9a      	ldr	r2, [pc, #616]	; (8001eac <HAL_GPIO_Init+0x2a0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d05e      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c48:	4a98      	ldr	r2, [pc, #608]	; (8001eac <HAL_GPIO_Init+0x2a0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d875      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c4e:	4a98      	ldr	r2, [pc, #608]	; (8001eb0 <HAL_GPIO_Init+0x2a4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d058      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c54:	4a96      	ldr	r2, [pc, #600]	; (8001eb0 <HAL_GPIO_Init+0x2a4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d86f      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c5a:	4a96      	ldr	r2, [pc, #600]	; (8001eb4 <HAL_GPIO_Init+0x2a8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d052      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c60:	4a94      	ldr	r2, [pc, #592]	; (8001eb4 <HAL_GPIO_Init+0x2a8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d869      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c66:	4a94      	ldr	r2, [pc, #592]	; (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04c      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c6c:	4a92      	ldr	r2, [pc, #584]	; (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d863      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c72:	4a92      	ldr	r2, [pc, #584]	; (8001ebc <HAL_GPIO_Init+0x2b0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d046      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c78:	4a90      	ldr	r2, [pc, #576]	; (8001ebc <HAL_GPIO_Init+0x2b0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d85d      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c7e:	2b12      	cmp	r3, #18
 8001c80:	d82a      	bhi.n	8001cd8 <HAL_GPIO_Init+0xcc>
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d859      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c86:	a201      	add	r2, pc, #4	; (adr r2, 8001c8c <HAL_GPIO_Init+0x80>)
 8001c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8c:	08001d07 	.word	0x08001d07
 8001c90:	08001ce1 	.word	0x08001ce1
 8001c94:	08001cf3 	.word	0x08001cf3
 8001c98:	08001d35 	.word	0x08001d35
 8001c9c:	08001d3b 	.word	0x08001d3b
 8001ca0:	08001d3b 	.word	0x08001d3b
 8001ca4:	08001d3b 	.word	0x08001d3b
 8001ca8:	08001d3b 	.word	0x08001d3b
 8001cac:	08001d3b 	.word	0x08001d3b
 8001cb0:	08001d3b 	.word	0x08001d3b
 8001cb4:	08001d3b 	.word	0x08001d3b
 8001cb8:	08001d3b 	.word	0x08001d3b
 8001cbc:	08001d3b 	.word	0x08001d3b
 8001cc0:	08001d3b 	.word	0x08001d3b
 8001cc4:	08001d3b 	.word	0x08001d3b
 8001cc8:	08001d3b 	.word	0x08001d3b
 8001ccc:	08001d3b 	.word	0x08001d3b
 8001cd0:	08001ce9 	.word	0x08001ce9
 8001cd4:	08001cfd 	.word	0x08001cfd
 8001cd8:	4a79      	ldr	r2, [pc, #484]	; (8001ec0 <HAL_GPIO_Init+0x2b4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cde:	e02c      	b.n	8001d3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e029      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	3304      	adds	r3, #4
 8001cee:	623b      	str	r3, [r7, #32]
          break;
 8001cf0:	e024      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	623b      	str	r3, [r7, #32]
          break;
 8001cfa:	e01f      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	330c      	adds	r3, #12
 8001d02:	623b      	str	r3, [r7, #32]
          break;
 8001d04:	e01a      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e013      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	611a      	str	r2, [r3, #16]
          break;
 8001d26:	e009      	b.n	8001d3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	615a      	str	r2, [r3, #20]
          break;
 8001d32:	e003      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e000      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          break;
 8001d3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d801      	bhi.n	8001d46 <HAL_GPIO_Init+0x13a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	e001      	b.n	8001d4a <HAL_GPIO_Init+0x13e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2bff      	cmp	r3, #255	; 0xff
 8001d50:	d802      	bhi.n	8001d58 <HAL_GPIO_Init+0x14c>
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	e002      	b.n	8001d5e <HAL_GPIO_Init+0x152>
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3b08      	subs	r3, #8
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	210f      	movs	r1, #15
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	6a39      	ldr	r1, [r7, #32]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80b1 	beq.w	8001eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d8c:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a4c      	ldr	r2, [pc, #304]	; (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001da4:	4a48      	ldr	r2, [pc, #288]	; (8001ec8 <HAL_GPIO_Init+0x2bc>)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d013      	beq.n	8001df8 <HAL_GPIO_Init+0x1ec>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	; (8001ed0 <HAL_GPIO_Init+0x2c4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00d      	beq.n	8001df4 <HAL_GPIO_Init+0x1e8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a3e      	ldr	r2, [pc, #248]	; (8001ed4 <HAL_GPIO_Init+0x2c8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d007      	beq.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a3d      	ldr	r2, [pc, #244]	; (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_GPIO_Init+0x1e0>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e006      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001dec:	2304      	movs	r3, #4
 8001dee:	e004      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	4093      	lsls	r3, r2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e0a:	492f      	ldr	r1, [pc, #188]	; (8001ec8 <HAL_GPIO_Init+0x2bc>)
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	492c      	ldr	r1, [pc, #176]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4928      	ldr	r1, [pc, #160]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4922      	ldr	r1, [pc, #136]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	491e      	ldr	r1, [pc, #120]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4918      	ldr	r1, [pc, #96]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	4914      	ldr	r1, [pc, #80]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d021      	beq.n	8001ee0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	490e      	ldr	r1, [pc, #56]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60cb      	str	r3, [r1, #12]
 8001ea8:	e021      	b.n	8001eee <HAL_GPIO_Init+0x2e2>
 8001eaa:	bf00      	nop
 8001eac:	10320000 	.word	0x10320000
 8001eb0:	10310000 	.word	0x10310000
 8001eb4:	10220000 	.word	0x10220000
 8001eb8:	10210000 	.word	0x10210000
 8001ebc:	10120000 	.word	0x10120000
 8001ec0:	10110000 	.word	0x10110000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40010800 	.word	0x40010800
 8001ed0:	40010c00 	.word	0x40010c00
 8001ed4:	40011000 	.word	0x40011000
 8001ed8:	40011400 	.word	0x40011400
 8001edc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	4909      	ldr	r1, [pc, #36]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f47f ae8e 	bne.w	8001c20 <HAL_GPIO_Init+0x14>
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	372c      	adds	r7, #44	; 0x2c
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e001      	b.n	8001f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	807b      	strh	r3, [r7, #2]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f52:	787b      	ldrb	r3, [r7, #1]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f58:	887a      	ldrh	r2, [r7, #2]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f5e:	e003      	b.n	8001f68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	041a      	lsls	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	611a      	str	r2, [r3, #16]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b085      	sub	sp, #20
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f84:	887a      	ldrh	r2, [r7, #2]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	041a      	lsls	r2, r3, #16
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	400b      	ands	r3, r1
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e12b      	b.n	800220e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe f9a2 	bl	8000314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2224      	movs	r2, #36	; 0x24
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002006:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002008:	f000 ffea 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 800200c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a81      	ldr	r2, [pc, #516]	; (8002218 <HAL_I2C_Init+0x274>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d807      	bhi.n	8002028 <HAL_I2C_Init+0x84>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a80      	ldr	r2, [pc, #512]	; (800221c <HAL_I2C_Init+0x278>)
 800201c:	4293      	cmp	r3, r2
 800201e:	bf94      	ite	ls
 8002020:	2301      	movls	r3, #1
 8002022:	2300      	movhi	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	e006      	b.n	8002036 <HAL_I2C_Init+0x92>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a7d      	ldr	r2, [pc, #500]	; (8002220 <HAL_I2C_Init+0x27c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	bf94      	ite	ls
 8002030:	2301      	movls	r3, #1
 8002032:	2300      	movhi	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0e7      	b.n	800220e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4a78      	ldr	r2, [pc, #480]	; (8002224 <HAL_I2C_Init+0x280>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	0c9b      	lsrs	r3, r3, #18
 8002048:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a6a      	ldr	r2, [pc, #424]	; (8002218 <HAL_I2C_Init+0x274>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d802      	bhi.n	8002078 <HAL_I2C_Init+0xd4>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3301      	adds	r3, #1
 8002076:	e009      	b.n	800208c <HAL_I2C_Init+0xe8>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	4a69      	ldr	r2, [pc, #420]	; (8002228 <HAL_I2C_Init+0x284>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	3301      	adds	r3, #1
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	430b      	orrs	r3, r1
 8002092:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800209e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	495c      	ldr	r1, [pc, #368]	; (8002218 <HAL_I2C_Init+0x274>)
 80020a8:	428b      	cmp	r3, r1
 80020aa:	d819      	bhi.n	80020e0 <HAL_I2C_Init+0x13c>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e59      	subs	r1, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ba:	1c59      	adds	r1, r3, #1
 80020bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020c0:	400b      	ands	r3, r1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_I2C_Init+0x138>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1e59      	subs	r1, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020da:	e051      	b.n	8002180 <HAL_I2C_Init+0x1dc>
 80020dc:	2304      	movs	r3, #4
 80020de:	e04f      	b.n	8002180 <HAL_I2C_Init+0x1dc>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d111      	bne.n	800210c <HAL_I2C_Init+0x168>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e58      	subs	r0, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	440b      	add	r3, r1
 80020f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e012      	b.n	8002132 <HAL_I2C_Init+0x18e>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1e58      	subs	r0, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	0099      	lsls	r1, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002122:	3301      	adds	r3, #1
 8002124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Init+0x196>
 8002136:	2301      	movs	r3, #1
 8002138:	e022      	b.n	8002180 <HAL_I2C_Init+0x1dc>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10e      	bne.n	8002160 <HAL_I2C_Init+0x1bc>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1e58      	subs	r0, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	440b      	add	r3, r1
 8002150:	fbb0 f3f3 	udiv	r3, r0, r3
 8002154:	3301      	adds	r3, #1
 8002156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215e:	e00f      	b.n	8002180 <HAL_I2C_Init+0x1dc>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e58      	subs	r0, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	0099      	lsls	r1, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	fbb0 f3f3 	udiv	r3, r0, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	6809      	ldr	r1, [r1, #0]
 8002184:	4313      	orrs	r3, r2
 8002186:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6911      	ldr	r1, [r2, #16]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68d2      	ldr	r2, [r2, #12]
 80021ba:	4311      	orrs	r1, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	000186a0 	.word	0x000186a0
 800221c:	001e847f 	.word	0x001e847f
 8002220:	003d08ff 	.word	0x003d08ff
 8002224:	431bde83 	.word	0x431bde83
 8002228:	10624dd3 	.word	0x10624dd3

0800222c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	461a      	mov	r2, r3
 8002238:	460b      	mov	r3, r1
 800223a:	817b      	strh	r3, [r7, #10]
 800223c:	4613      	mov	r3, r2
 800223e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff faf8 	bl	8001834 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b20      	cmp	r3, #32
 8002250:	f040 80e0 	bne.w	8002414 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2319      	movs	r3, #25
 800225a:	2201      	movs	r2, #1
 800225c:	4970      	ldr	r1, [pc, #448]	; (8002420 <HAL_I2C_Master_Transmit+0x1f4>)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f964 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
 800226c:	e0d3      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_I2C_Master_Transmit+0x50>
 8002278:	2302      	movs	r3, #2
 800227a:	e0cc      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d007      	beq.n	80022a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2221      	movs	r2, #33	; 0x21
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2210      	movs	r2, #16
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	893a      	ldrh	r2, [r7, #8]
 80022d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a50      	ldr	r2, [pc, #320]	; (8002424 <HAL_I2C_Master_Transmit+0x1f8>)
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022e4:	8979      	ldrh	r1, [r7, #10]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f89c 	bl	8002428 <I2C_MasterRequestWrite>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e08d      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002310:	e066      	b.n	80023e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	6a39      	ldr	r1, [r7, #32]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f9de 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00d      	beq.n	800233e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b04      	cmp	r3, #4
 8002328:	d107      	bne.n	800233a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06b      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d11b      	bne.n	80023b4 <HAL_I2C_Master_Transmit+0x188>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d017      	beq.n	80023b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	6a39      	ldr	r1, [r7, #32]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f9ce 	bl	800275a <I2C_WaitOnBTFFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d107      	bne.n	80023dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e01a      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d194      	bne.n	8002312 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	00100002 	.word	0x00100002
 8002424:	ffff0000 	.word	0xffff0000

08002428 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	460b      	mov	r3, r1
 8002436:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d006      	beq.n	8002452 <I2C_MasterRequestWrite+0x2a>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d003      	beq.n	8002452 <I2C_MasterRequestWrite+0x2a>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002450:	d108      	bne.n	8002464 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e00b      	b.n	800247c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	2b12      	cmp	r3, #18
 800246a:	d107      	bne.n	800247c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f84f 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a2:	d103      	bne.n	80024ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e035      	b.n	800251c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024b8:	d108      	bne.n	80024cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ba:	897b      	ldrh	r3, [r7, #10]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024c8:	611a      	str	r2, [r3, #16]
 80024ca:	e01b      	b.n	8002504 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024cc:	897b      	ldrh	r3, [r7, #10]
 80024ce:	11db      	asrs	r3, r3, #7
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 0306 	and.w	r3, r3, #6
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f063 030f 	orn	r3, r3, #15
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	490e      	ldr	r1, [pc, #56]	; (8002524 <I2C_MasterRequestWrite+0xfc>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f875 	bl	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e010      	b.n	800251c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <I2C_MasterRequestWrite+0x100>)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f865 	bl	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00010008 	.word	0x00010008
 8002528:	00010002 	.word	0x00010002

0800252c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253c:	e025      	b.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d021      	beq.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7ff f975 	bl	8001834 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d116      	bne.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e023      	b.n	80025d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10d      	bne.n	80025b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	e00c      	b.n	80025ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4013      	ands	r3, r2
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d0b6      	beq.n	800253e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e8:	e051      	b.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f8:	d123      	bne.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002608:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002612:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0204 	orr.w	r2, r3, #4
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e046      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d021      	beq.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7ff f8f3 	bl	8001834 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d116      	bne.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e020      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10c      	bne.n	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e00b      	b.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4013      	ands	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d18d      	bne.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e4:	e02d      	b.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f878 	bl	80027dc <I2C_IsAcknowledgeFailed>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e02d      	b.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d021      	beq.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fe:	f7ff f899 	bl	8001834 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	d302      	bcc.n	8002714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d116      	bne.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e007      	b.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d1ca      	bne.n	80026e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002766:	e02d      	b.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f837 	bl	80027dc <I2C_IsAcknowledgeFailed>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e02d      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d021      	beq.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002780:	f7ff f858 	bl	8001834 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d302      	bcc.n	8002796 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e007      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d1ca      	bne.n	8002768 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d11b      	bne.n	800282c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e272      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8087 	beq.w	8002966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002858:	4b92      	ldr	r3, [pc, #584]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b04      	cmp	r3, #4
 8002862:	d00c      	beq.n	800287e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002864:	4b8f      	ldr	r3, [pc, #572]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d112      	bne.n	8002896 <HAL_RCC_OscConfig+0x5e>
 8002870:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d10b      	bne.n	8002896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287e:	4b89      	ldr	r3, [pc, #548]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d06c      	beq.n	8002964 <HAL_RCC_OscConfig+0x12c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d168      	bne.n	8002964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e24c      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x76>
 80028a0:	4b80      	ldr	r3, [pc, #512]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a7f      	ldr	r2, [pc, #508]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e02e      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x98>
 80028b6:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a7a      	ldr	r2, [pc, #488]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b78      	ldr	r3, [pc, #480]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a77      	ldr	r2, [pc, #476]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e01d      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0xbc>
 80028da:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a71      	ldr	r2, [pc, #452]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6e      	ldr	r2, [pc, #440]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028f4:	4b6b      	ldr	r3, [pc, #428]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6a      	ldr	r2, [pc, #424]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a67      	ldr	r2, [pc, #412]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe ff8e 	bl	8001834 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe ff8a 	bl	8001834 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e200      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xe4>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe ff7a 	bl	8001834 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7fe ff76 	bl	8001834 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1ec      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x10c>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d063      	beq.n	8002a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002972:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b08      	cmp	r3, #8
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x18c>
 800298a:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x176>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e1c0      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4939      	ldr	r1, [pc, #228]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	e03a      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_RCC_OscConfig+0x270>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe ff2f 	bl	8001834 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029da:	f7fe ff2b 	bl	8001834 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1a1      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4927      	ldr	r1, [pc, #156]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_RCC_OscConfig+0x270>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe ff0e 	bl	8001834 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7fe ff0a 	bl	8001834 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e180      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03a      	beq.n	8002abc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d019      	beq.n	8002a82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7fe feee 	bl	8001834 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7fe feea 	bl	8001834 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e160      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f000 fad8 	bl	8003030 <RCC_Delay>
 8002a80:	e01c      	b.n	8002abc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7fe fed4 	bl	8001834 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8e:	e00f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a90:	f7fe fed0 	bl	8001834 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d908      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e146      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	42420000 	.word	0x42420000
 8002aac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	4b92      	ldr	r3, [pc, #584]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e9      	bne.n	8002a90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a6 	beq.w	8002c16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ace:	4b8b      	ldr	r3, [pc, #556]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	4b88      	ldr	r3, [pc, #544]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a87      	ldr	r2, [pc, #540]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	61d3      	str	r3, [r2, #28]
 8002ae6:	4b85      	ldr	r3, [pc, #532]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b82      	ldr	r3, [pc, #520]	; (8002d00 <HAL_RCC_OscConfig+0x4c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d118      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4b7f      	ldr	r3, [pc, #508]	; (8002d00 <HAL_RCC_OscConfig+0x4c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7e      	ldr	r2, [pc, #504]	; (8002d00 <HAL_RCC_OscConfig+0x4c8>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fe91 	bl	8001834 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b16:	f7fe fe8d 	bl	8001834 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b64      	cmp	r3, #100	; 0x64
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e103      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	4b75      	ldr	r3, [pc, #468]	; (8002d00 <HAL_RCC_OscConfig+0x4c8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x312>
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a6e      	ldr	r2, [pc, #440]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	e02d      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x334>
 8002b52:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4a69      	ldr	r2, [pc, #420]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6213      	str	r3, [r2, #32]
 8002b5e:	4b67      	ldr	r3, [pc, #412]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a66      	ldr	r2, [pc, #408]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	e01c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d10c      	bne.n	8002b8e <HAL_RCC_OscConfig+0x356>
 8002b74:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4a60      	ldr	r2, [pc, #384]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	6213      	str	r3, [r2, #32]
 8002b80:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4a5d      	ldr	r2, [pc, #372]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6213      	str	r3, [r2, #32]
 8002b8c:	e00b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b8e:	4b5b      	ldr	r3, [pc, #364]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a5a      	ldr	r2, [pc, #360]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6213      	str	r3, [r2, #32]
 8002b9a:	4b58      	ldr	r3, [pc, #352]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a57      	ldr	r2, [pc, #348]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d015      	beq.n	8002bda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7fe fe41 	bl	8001834 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe fe3d 	bl	8001834 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e0b1      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x37e>
 8002bd8:	e014      	b.n	8002c04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fe fe2b 	bl	8001834 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe fe27 	bl	8001834 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e09b      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ee      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0a:	4b3c      	ldr	r3, [pc, #240]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a3b      	ldr	r2, [pc, #236]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8087 	beq.w	8002d2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d061      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d146      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <HAL_RCC_OscConfig+0x4cc>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fdfb 	bl	8001834 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe fdf7 	bl	8001834 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e06d      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c54:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c6a:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	4921      	ldr	r1, [pc, #132]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c7c:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a19      	ldr	r1, [r3, #32]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	491b      	ldr	r1, [pc, #108]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x4cc>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fdcb 	bl	8001834 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe fdc7 	bl	8001834 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e03d      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x46a>
 8002cc0:	e035      	b.n	8002d2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_RCC_OscConfig+0x4cc>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fdb4 	bl	8001834 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe fdb0 	bl	8001834 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e026      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x498>
 8002cee:	e01e      	b.n	8002d2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e019      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40007000 	.word	0x40007000
 8002d04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_OscConfig+0x500>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d106      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000

08002d3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0d0      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d910      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b67      	ldr	r3, [pc, #412]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 0207 	bic.w	r2, r3, #7
 8002d66:	4965      	ldr	r1, [pc, #404]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b63      	ldr	r3, [pc, #396]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0b8      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002da2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db0:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	494d      	ldr	r1, [pc, #308]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d040      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d115      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e07f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfa:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e073      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06b      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1a:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f023 0203 	bic.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4936      	ldr	r1, [pc, #216]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e2c:	f7fe fd02 	bl	8001834 <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e34:	f7fe fcfe 	bl	8001834 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e053      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 020c 	and.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d1eb      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b27      	ldr	r3, [pc, #156]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d210      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 0207 	bic.w	r2, r3, #7
 8002e72:	4922      	ldr	r1, [pc, #136]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e032      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4916      	ldr	r1, [pc, #88]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	490e      	ldr	r1, [pc, #56]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eca:	f000 f821 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	490a      	ldr	r1, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	5ccb      	ldrb	r3, [r1, r3]
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1cc>)
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1d0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fc60 	bl	80017b0 <HAL_InitTick>

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40022000 	.word	0x40022000
 8002f00:	40021000 	.word	0x40021000
 8002f04:	0800508c 	.word	0x0800508c
 8002f08:	20000008 	.word	0x20000008
 8002f0c:	2000000c 	.word	0x2000000c

08002f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b490      	push	{r4, r7}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f16:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xac>)
 8002f18:	1d3c      	adds	r4, r7, #4
 8002f1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f20:	f240 2301 	movw	r3, #513	; 0x201
 8002f24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d002      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x40>
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x46>
 8002f4e:	e02b      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f50:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f52:	623b      	str	r3, [r7, #32]
      break;
 8002f54:	e02b      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	0c9b      	lsrs	r3, r3, #18
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3328      	adds	r3, #40	; 0x28
 8002f60:	443b      	add	r3, r7
 8002f62:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f66:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d012      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	0c5b      	lsrs	r3, r3, #17
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	3328      	adds	r3, #40	; 0x28
 8002f7e:	443b      	add	r3, r7
 8002f80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f8a:	fb03 f202 	mul.w	r2, r3, r2
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
 8002f96:	e004      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	623b      	str	r3, [r7, #32]
      break;
 8002fa6:	e002      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002faa:	623b      	str	r3, [r7, #32]
      break;
 8002fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fae:	6a3b      	ldr	r3, [r7, #32]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3728      	adds	r7, #40	; 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc90      	pop	{r4, r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	0800507c 	.word	0x0800507c
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	007a1200 	.word	0x007a1200
 8002fc8:	003d0900 	.word	0x003d0900

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	20000008 	.word	0x20000008

08002fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe4:	f7ff fff2 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	0800509c 	.word	0x0800509c

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800300c:	f7ff ffde 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	0adb      	lsrs	r3, r3, #11
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4903      	ldr	r1, [pc, #12]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	0800509c 	.word	0x0800509c

08003030 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <RCC_Delay+0x34>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <RCC_Delay+0x38>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0a5b      	lsrs	r3, r3, #9
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800304c:	bf00      	nop
  }
  while (Delay --);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1e5a      	subs	r2, r3, #1
 8003052:	60fa      	str	r2, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f9      	bne.n	800304c <RCC_Delay+0x1c>
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	20000008 	.word	0x20000008
 8003068:	10624dd3 	.word	0x10624dd3

0800306c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e076      	b.n	800316c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2b00      	cmp	r3, #0
 8003084:	d108      	bne.n	8003098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800308e:	d009      	beq.n	80030a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
 8003096:	e005      	b.n	80030a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe f96a 	bl	8001398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	ea42 0103 	orr.w	r1, r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	0c1a      	lsrs	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f002 0204 	and.w	r2, r2, #4
 800314a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003182:	2301      	movs	r3, #1
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_SPI_TransmitReceive+0x26>
 8003196:	2302      	movs	r3, #2
 8003198:	e18a      	b.n	80034b0 <HAL_SPI_TransmitReceive+0x33c>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a2:	f7fe fb47 	bl	8001834 <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d00f      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x70>
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ca:	d107      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x68>
 80031d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d003      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031e2:	e15b      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x82>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x82>
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031fc:	e14e      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b04      	cmp	r3, #4
 8003208:	d003      	beq.n	8003212 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2205      	movs	r2, #5
 800320e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	887a      	ldrh	r2, [r7, #2]
 8003222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d007      	beq.n	8003266 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326e:	d178      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_SPI_TransmitReceive+0x10a>
 8003278:	8b7b      	ldrh	r3, [r7, #26]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d166      	bne.n	800334c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	1c9a      	adds	r2, r3, #2
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a2:	e053      	b.n	800334c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d11b      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x176>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d016      	beq.n	80032ea <HAL_SPI_TransmitReceive+0x176>
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d113      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	881a      	ldrh	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	1c9a      	adds	r2, r3, #2
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d119      	bne.n	800332c <HAL_SPI_TransmitReceive+0x1b8>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d014      	beq.n	800332c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	b292      	uxth	r2, r2
 800330e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	1c9a      	adds	r2, r3, #2
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003328:	2301      	movs	r3, #1
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800332c:	f7fe fa82 	bl	8001834 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003338:	429a      	cmp	r2, r3
 800333a:	d807      	bhi.n	800334c <HAL_SPI_TransmitReceive+0x1d8>
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d003      	beq.n	800334c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800334a:	e0a7      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1a6      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x130>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1a1      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x130>
 8003360:	e07c      	b.n	800345c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x1fc>
 800336a:	8b7b      	ldrh	r3, [r7, #26]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d16b      	bne.n	8003448 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	7812      	ldrb	r2, [r2, #0]
 800337c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003396:	e057      	b.n	8003448 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d11c      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x26c>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d017      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x26c>
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d114      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	7812      	ldrb	r2, [r2, #0]
 80033c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d119      	bne.n	8003422 <HAL_SPI_TransmitReceive+0x2ae>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d014      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800341e:	2301      	movs	r3, #1
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003422:	f7fe fa07 	bl	8001834 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800342e:	429a      	cmp	r2, r3
 8003430:	d803      	bhi.n	800343a <HAL_SPI_TransmitReceive+0x2c6>
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d102      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x2cc>
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	2b00      	cmp	r3, #0
 800343e:	d103      	bne.n	8003448 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003446:	e029      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1a2      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x224>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d19d      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800345c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f8b1 	bl	80035c8 <SPI_EndRxTxTransaction>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003478:	e010      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	e000      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800349a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3730      	adds	r7, #48	; 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034c8:	f7fe f9b4 	bl	8001834 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	4413      	add	r3, r2
 80034d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034d8:	f7fe f9ac 	bl	8001834 <HAL_GetTick>
 80034dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	015b      	lsls	r3, r3, #5
 80034e4:	0d1b      	lsrs	r3, r3, #20
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ee:	e054      	b.n	800359a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d050      	beq.n	800359a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034f8:	f7fe f99c 	bl	8001834 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	429a      	cmp	r2, r3
 8003506:	d902      	bls.n	800350e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d13d      	bne.n	800358a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800351c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003526:	d111      	bne.n	800354c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	d004      	beq.n	800353c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d107      	bne.n	800354c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003554:	d10f      	bne.n	8003576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e017      	b.n	80035ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3b01      	subs	r3, #1
 8003598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d19b      	bne.n	80034f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000008 	.word	0x20000008

080035c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2200      	movs	r2, #0
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7ff ff6a 	bl	80034b8 <SPI_WaitFlagStateUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e000      	b.n	80035fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e041      	b.n	800369a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd ffea 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f000 f93c 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d001      	beq.n	80036bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e032      	b.n	8003722 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_TIM_Base_Start+0x88>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_TIM_Base_Start+0x48>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d6:	d009      	beq.n	80036ec <HAL_TIM_Base_Start+0x48>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <HAL_TIM_Base_Start+0x8c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_TIM_Base_Start+0x48>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a13      	ldr	r2, [pc, #76]	; (8003734 <HAL_TIM_Base_Start+0x90>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d111      	bne.n	8003710 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d010      	beq.n	8003720 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370e:	e007      	b.n	8003720 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800

08003738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_TIM_ConfigClockSource+0x18>
 800374c:	2302      	movs	r3, #2
 800374e:	e0b3      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x180>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800376e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003776:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003788:	d03e      	beq.n	8003808 <HAL_TIM_ConfigClockSource+0xd0>
 800378a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378e:	f200 8087 	bhi.w	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	f000 8085 	beq.w	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	d87f      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037a0:	2b70      	cmp	r3, #112	; 0x70
 80037a2:	d01a      	beq.n	80037da <HAL_TIM_ConfigClockSource+0xa2>
 80037a4:	2b70      	cmp	r3, #112	; 0x70
 80037a6:	d87b      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037a8:	2b60      	cmp	r3, #96	; 0x60
 80037aa:	d050      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x116>
 80037ac:	2b60      	cmp	r3, #96	; 0x60
 80037ae:	d877      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037b0:	2b50      	cmp	r3, #80	; 0x50
 80037b2:	d03c      	beq.n	800382e <HAL_TIM_ConfigClockSource+0xf6>
 80037b4:	2b50      	cmp	r3, #80	; 0x50
 80037b6:	d873      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d058      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x136>
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d86f      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037c0:	2b30      	cmp	r3, #48	; 0x30
 80037c2:	d064      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x156>
 80037c4:	2b30      	cmp	r3, #48	; 0x30
 80037c6:	d86b      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d060      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x156>
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d867      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d05c      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x156>
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d05a      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037d8:	e062      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6899      	ldr	r1, [r3, #8]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f000 f942 	bl	8003a72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	609a      	str	r2, [r3, #8]
      break;
 8003806:	e04e      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6899      	ldr	r1, [r3, #8]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f000 f92b 	bl	8003a72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800382a:	609a      	str	r2, [r3, #8]
      break;
 800382c:	e03b      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	461a      	mov	r2, r3
 800383c:	f000 f8a2 	bl	8003984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2150      	movs	r1, #80	; 0x50
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f8f9 	bl	8003a3e <TIM_ITRx_SetConfig>
      break;
 800384c:	e02b      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	461a      	mov	r2, r3
 800385c:	f000 f8c0 	bl	80039e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2160      	movs	r1, #96	; 0x60
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f8e9 	bl	8003a3e <TIM_ITRx_SetConfig>
      break;
 800386c:	e01b      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	461a      	mov	r2, r3
 800387c:	f000 f882 	bl	8003984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2140      	movs	r1, #64	; 0x40
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f8d9 	bl	8003a3e <TIM_ITRx_SetConfig>
      break;
 800388c:	e00b      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4619      	mov	r1, r3
 8003898:	4610      	mov	r0, r2
 800389a:	f000 f8d0 	bl	8003a3e <TIM_ITRx_SetConfig>
        break;
 800389e:	e002      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038a0:	bf00      	nop
 80038a2:	e000      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a29      	ldr	r2, [pc, #164]	; (8003978 <TIM_Base_SetConfig+0xb8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <TIM_Base_SetConfig+0x30>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038de:	d007      	beq.n	80038f0 <TIM_Base_SetConfig+0x30>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a26      	ldr	r2, [pc, #152]	; (800397c <TIM_Base_SetConfig+0xbc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0x30>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a25      	ldr	r2, [pc, #148]	; (8003980 <TIM_Base_SetConfig+0xc0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <TIM_Base_SetConfig+0xb8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0x62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0x62>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <TIM_Base_SetConfig+0xbc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0x62>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a18      	ldr	r2, [pc, #96]	; (8003980 <TIM_Base_SetConfig+0xc0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a07      	ldr	r2, [pc, #28]	; (8003978 <TIM_Base_SetConfig+0xb8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d103      	bne.n	8003968 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	615a      	str	r2, [r3, #20]
}
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800

08003984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f023 0201 	bic.w	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f023 030a 	bic.w	r3, r3, #10
 80039c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f023 0210 	bic.w	r2, r3, #16
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	031b      	lsls	r3, r3, #12
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	621a      	str	r2, [r3, #32]
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f043 0307 	orr.w	r3, r3, #7
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	609a      	str	r2, [r3, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b087      	sub	sp, #28
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	021a      	lsls	r2, r3, #8
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	609a      	str	r2, [r3, #8]
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e046      	b.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00e      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b14:	d009      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d004      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10c      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800

08003b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e03f      	b.n	8003bfe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd fd7c 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fc85 	bl	80044c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b08a      	sub	sp, #40	; 0x28
 8003c0a:	af02      	add	r7, sp, #8
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d17c      	bne.n	8003d20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_UART_Transmit+0x2c>
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e075      	b.n	8003d22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_UART_Transmit+0x3e>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e06e      	b.n	8003d22 <HAL_UART_Transmit+0x11c>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2221      	movs	r2, #33	; 0x21
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c5a:	f7fd fdeb 	bl	8001834 <HAL_GetTick>
 8003c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	88fa      	ldrh	r2, [r7, #6]
 8003c64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c74:	d108      	bne.n	8003c88 <HAL_UART_Transmit+0x82>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d104      	bne.n	8003c88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	e003      	b.n	8003c90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c98:	e02a      	b.n	8003cf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fa38 	bl	800411a <UART_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e036      	b.n	8003d22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	3302      	adds	r3, #2
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	e007      	b.n	8003ce2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1cf      	bne.n	8003c9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	2140      	movs	r1, #64	; 0x40
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fa08 	bl	800411a <UART_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e006      	b.n	8003d22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e000      	b.n	8003d22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
  }
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	4613      	mov	r3, r2
 8003d36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d11d      	bne.n	8003d80 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_UART_Receive_IT+0x26>
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e016      	b.n	8003d82 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Receive_IT+0x38>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e00f      	b.n	8003d82 <HAL_UART_Receive_IT+0x58>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	461a      	mov	r2, r3
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fa19 	bl	80041ae <UART_Start_Receive_IT>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	e000      	b.n	8003d82 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_UART_IRQHandler+0x52>
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fac9 	bl	800436e <UART_Receive_IT>
      return;
 8003ddc:	e17b      	b.n	80040d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80b1 	beq.w	8003f48 <HAL_UART_IRQHandler+0x1bc>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_UART_IRQHandler+0x70>
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80a6 	beq.w	8003f48 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_UART_IRQHandler+0x90>
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_UART_IRQHandler+0xb0>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f043 0202 	orr.w	r2, r3, #2
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_UART_IRQHandler+0xd0>
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f043 0204 	orr.w	r2, r3, #4
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00f      	beq.n	8003e86 <HAL_UART_IRQHandler+0xfa>
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d104      	bne.n	8003e7a <HAL_UART_IRQHandler+0xee>
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f043 0208 	orr.w	r2, r3, #8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 811e 	beq.w	80040cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_UART_IRQHandler+0x11e>
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fa62 	bl	800436e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x146>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d031      	beq.n	8003f36 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f9a4 	bl	8004220 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d023      	beq.n	8003f2e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d013      	beq.n	8003f26 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	4a76      	ldr	r2, [pc, #472]	; (80040dc <HAL_UART_IRQHandler+0x350>)
 8003f04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fd fe08 	bl	8001b20 <HAL_DMA_Abort_IT>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d016      	beq.n	8003f44 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f20:	4610      	mov	r0, r2
 8003f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	e00e      	b.n	8003f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8e3 	bl	80040f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	e00a      	b.n	8003f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8df 	bl	80040f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	e006      	b.n	8003f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8db 	bl	80040f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f42:	e0c3      	b.n	80040cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f44:	bf00      	nop
    return;
 8003f46:	e0c1      	b.n	80040cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	f040 80a1 	bne.w	8004094 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 809b 	beq.w	8004094 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8095 	beq.w	8004094 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d04e      	beq.n	800402c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f98:	8a3b      	ldrh	r3, [r7, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8098 	beq.w	80040d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fa4:	8a3a      	ldrh	r2, [r7, #16]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	f080 8092 	bcs.w	80040d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8a3a      	ldrh	r2, [r7, #16]
 8003fb0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d02b      	beq.n	8004014 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0210 	bic.w	r2, r2, #16
 8004008:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd fd4b 	bl	8001aaa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800401c:	b29b      	uxth	r3, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	b29b      	uxth	r3, r3
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f86d 	bl	8004104 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800402a:	e051      	b.n	80040d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004034:	b29b      	uxth	r3, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d047      	beq.n	80040d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004044:	8a7b      	ldrh	r3, [r7, #18]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d044      	beq.n	80040d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004058:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0210 	bic.w	r2, r2, #16
 8004086:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004088:	8a7b      	ldrh	r3, [r7, #18]
 800408a:	4619      	mov	r1, r3
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f839 	bl	8004104 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004092:	e01f      	b.n	80040d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_UART_IRQHandler+0x324>
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f8f9 	bl	80042a0 <UART_Transmit_IT>
    return;
 80040ae:	e012      	b.n	80040d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <HAL_UART_IRQHandler+0x34a>
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f93a 	bl	800433e <UART_EndTransmit_IT>
    return;
 80040ca:	e004      	b.n	80040d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80040cc:	bf00      	nop
 80040ce:	e002      	b.n	80040d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80040d0:	bf00      	nop
 80040d2:	e000      	b.n	80040d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80040d4:	bf00      	nop
  }
}
 80040d6:	3728      	adds	r7, #40	; 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	08004279 	.word	0x08004279

080040e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	603b      	str	r3, [r7, #0]
 8004126:	4613      	mov	r3, r2
 8004128:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412a:	e02c      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d028      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0x30>
 800413a:	f7fd fb7b 	bl	8001834 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	429a      	cmp	r2, r3
 8004148:	d21d      	bcs.n	8004186 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004158:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e00f      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4013      	ands	r3, r2
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d0c3      	beq.n	800412c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	4613      	mov	r3, r2
 80041ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2222      	movs	r2, #34	; 0x22
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0220 	orr.w	r2, r2, #32
 8004212:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004236:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	2b01      	cmp	r3, #1
 800424e:	d107      	bne.n	8004260 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0210 	bic.w	r2, r2, #16
 800425e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff ff2d 	bl	80040f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b21      	cmp	r3, #33	; 0x21
 80042b2:	d13e      	bne.n	8004332 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d114      	bne.n	80042e8 <UART_Transmit_IT+0x48>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d110      	bne.n	80042e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	1c9a      	adds	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	621a      	str	r2, [r3, #32]
 80042e6:	e008      	b.n	80042fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	1c59      	adds	r1, r3, #1
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6211      	str	r1, [r2, #32]
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29b      	uxth	r3, r3
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	4619      	mov	r1, r3
 8004308:	84d1      	strh	r1, [r2, #38]	; 0x26
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800431c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800432c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004354:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff febe 	bl	80040e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b22      	cmp	r3, #34	; 0x22
 8004380:	f040 8099 	bne.w	80044b6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438c:	d117      	bne.n	80043be <UART_Receive_IT+0x50>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d113      	bne.n	80043be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	1c9a      	adds	r2, r3, #2
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28
 80043bc:	e026      	b.n	800440c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d0:	d007      	beq.n	80043e2 <UART_Receive_IT+0x74>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <UART_Receive_IT+0x82>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e008      	b.n	8004402 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29b      	uxth	r3, r3
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	4619      	mov	r1, r3
 800441a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800441c:	2b00      	cmp	r3, #0
 800441e:	d148      	bne.n	80044b2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0220 	bic.w	r2, r2, #32
 800442e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800443e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	2b01      	cmp	r3, #1
 800445e:	d123      	bne.n	80044a8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0210 	bic.w	r2, r2, #16
 8004474:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b10      	cmp	r3, #16
 8004482:	d10a      	bne.n	800449a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fe2f 	bl	8004104 <HAL_UARTEx_RxEventCallback>
 80044a6:	e002      	b.n	80044ae <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fc f91b 	bl	80006e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e002      	b.n	80044b8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044fa:	f023 030c 	bic.w	r3, r3, #12
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	430b      	orrs	r3, r1
 8004506:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2c      	ldr	r2, [pc, #176]	; (80045d4 <UART_SetConfig+0x114>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d103      	bne.n	8004530 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004528:	f7fe fd6e 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	e002      	b.n	8004536 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fe fd56 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8004534:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009a      	lsls	r2, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <UART_SetConfig+0x118>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	0119      	lsls	r1, r3, #4
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009a      	lsls	r2, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	fbb2 f2f3 	udiv	r2, r2, r3
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <UART_SetConfig+0x118>)
 800456e:	fba3 0302 	umull	r0, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2064      	movs	r0, #100	; 0x64
 8004576:	fb00 f303 	mul.w	r3, r0, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	3332      	adds	r3, #50	; 0x32
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <UART_SetConfig+0x118>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458c:	4419      	add	r1, r3
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009a      	lsls	r2, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <UART_SetConfig+0x118>)
 80045a6:	fba3 0302 	umull	r0, r3, r3, r2
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2064      	movs	r0, #100	; 0x64
 80045ae:	fb00 f303 	mul.w	r3, r0, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	3332      	adds	r3, #50	; 0x32
 80045b8:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <UART_SetConfig+0x118>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	440a      	add	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40013800 	.word	0x40013800
 80045d8:	51eb851f 	.word	0x51eb851f

080045dc <__errno>:
 80045dc:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <__errno+0x8>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000014 	.word	0x20000014

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	2600      	movs	r6, #0
 80045ec:	4d0c      	ldr	r5, [pc, #48]	; (8004620 <__libc_init_array+0x38>)
 80045ee:	4c0d      	ldr	r4, [pc, #52]	; (8004624 <__libc_init_array+0x3c>)
 80045f0:	1b64      	subs	r4, r4, r5
 80045f2:	10a4      	asrs	r4, r4, #2
 80045f4:	42a6      	cmp	r6, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	f000 fcd6 	bl	8004fa8 <_init>
 80045fc:	2600      	movs	r6, #0
 80045fe:	4d0a      	ldr	r5, [pc, #40]	; (8004628 <__libc_init_array+0x40>)
 8004600:	4c0a      	ldr	r4, [pc, #40]	; (800462c <__libc_init_array+0x44>)
 8004602:	1b64      	subs	r4, r4, r5
 8004604:	10a4      	asrs	r4, r4, #2
 8004606:	42a6      	cmp	r6, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004610:	4798      	blx	r3
 8004612:	3601      	adds	r6, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	f855 3b04 	ldr.w	r3, [r5], #4
 800461a:	4798      	blx	r3
 800461c:	3601      	adds	r6, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	080050d8 	.word	0x080050d8
 8004624:	080050d8 	.word	0x080050d8
 8004628:	080050d8 	.word	0x080050d8
 800462c:	080050dc 	.word	0x080050dc

08004630 <memset>:
 8004630:	4603      	mov	r3, r0
 8004632:	4402      	add	r2, r0
 8004634:	4293      	cmp	r3, r2
 8004636:	d100      	bne.n	800463a <memset+0xa>
 8004638:	4770      	bx	lr
 800463a:	f803 1b01 	strb.w	r1, [r3], #1
 800463e:	e7f9      	b.n	8004634 <memset+0x4>

08004640 <siprintf>:
 8004640:	b40e      	push	{r1, r2, r3}
 8004642:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004646:	b500      	push	{lr}
 8004648:	b09c      	sub	sp, #112	; 0x70
 800464a:	ab1d      	add	r3, sp, #116	; 0x74
 800464c:	9002      	str	r0, [sp, #8]
 800464e:	9006      	str	r0, [sp, #24]
 8004650:	9107      	str	r1, [sp, #28]
 8004652:	9104      	str	r1, [sp, #16]
 8004654:	4808      	ldr	r0, [pc, #32]	; (8004678 <siprintf+0x38>)
 8004656:	4909      	ldr	r1, [pc, #36]	; (800467c <siprintf+0x3c>)
 8004658:	f853 2b04 	ldr.w	r2, [r3], #4
 800465c:	9105      	str	r1, [sp, #20]
 800465e:	6800      	ldr	r0, [r0, #0]
 8004660:	a902      	add	r1, sp, #8
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	f000 f8a2 	bl	80047ac <_svfiprintf_r>
 8004668:	2200      	movs	r2, #0
 800466a:	9b02      	ldr	r3, [sp, #8]
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	b01c      	add	sp, #112	; 0x70
 8004670:	f85d eb04 	ldr.w	lr, [sp], #4
 8004674:	b003      	add	sp, #12
 8004676:	4770      	bx	lr
 8004678:	20000014 	.word	0x20000014
 800467c:	ffff0208 	.word	0xffff0208

08004680 <_vsniprintf_r>:
 8004680:	b530      	push	{r4, r5, lr}
 8004682:	4614      	mov	r4, r2
 8004684:	2c00      	cmp	r4, #0
 8004686:	4605      	mov	r5, r0
 8004688:	461a      	mov	r2, r3
 800468a:	b09b      	sub	sp, #108	; 0x6c
 800468c:	da05      	bge.n	800469a <_vsniprintf_r+0x1a>
 800468e:	238b      	movs	r3, #139	; 0x8b
 8004690:	6003      	str	r3, [r0, #0]
 8004692:	f04f 30ff 	mov.w	r0, #4294967295
 8004696:	b01b      	add	sp, #108	; 0x6c
 8004698:	bd30      	pop	{r4, r5, pc}
 800469a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800469e:	f8ad 300c 	strh.w	r3, [sp, #12]
 80046a2:	bf0c      	ite	eq
 80046a4:	4623      	moveq	r3, r4
 80046a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046aa:	9302      	str	r3, [sp, #8]
 80046ac:	9305      	str	r3, [sp, #20]
 80046ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046b2:	9100      	str	r1, [sp, #0]
 80046b4:	9104      	str	r1, [sp, #16]
 80046b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80046ba:	4669      	mov	r1, sp
 80046bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80046be:	f000 f875 	bl	80047ac <_svfiprintf_r>
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	bfbc      	itt	lt
 80046c6:	238b      	movlt	r3, #139	; 0x8b
 80046c8:	602b      	strlt	r3, [r5, #0]
 80046ca:	2c00      	cmp	r4, #0
 80046cc:	d0e3      	beq.n	8004696 <_vsniprintf_r+0x16>
 80046ce:	2200      	movs	r2, #0
 80046d0:	9b00      	ldr	r3, [sp, #0]
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	e7df      	b.n	8004696 <_vsniprintf_r+0x16>
	...

080046d8 <vsniprintf>:
 80046d8:	b507      	push	{r0, r1, r2, lr}
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	460a      	mov	r2, r1
 80046e0:	4601      	mov	r1, r0
 80046e2:	4803      	ldr	r0, [pc, #12]	; (80046f0 <vsniprintf+0x18>)
 80046e4:	6800      	ldr	r0, [r0, #0]
 80046e6:	f7ff ffcb 	bl	8004680 <_vsniprintf_r>
 80046ea:	b003      	add	sp, #12
 80046ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80046f0:	20000014 	.word	0x20000014

080046f4 <__ssputs_r>:
 80046f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	688e      	ldr	r6, [r1, #8]
 80046fa:	4682      	mov	sl, r0
 80046fc:	429e      	cmp	r6, r3
 80046fe:	460c      	mov	r4, r1
 8004700:	4690      	mov	r8, r2
 8004702:	461f      	mov	r7, r3
 8004704:	d838      	bhi.n	8004778 <__ssputs_r+0x84>
 8004706:	898a      	ldrh	r2, [r1, #12]
 8004708:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800470c:	d032      	beq.n	8004774 <__ssputs_r+0x80>
 800470e:	6825      	ldr	r5, [r4, #0]
 8004710:	6909      	ldr	r1, [r1, #16]
 8004712:	3301      	adds	r3, #1
 8004714:	eba5 0901 	sub.w	r9, r5, r1
 8004718:	6965      	ldr	r5, [r4, #20]
 800471a:	444b      	add	r3, r9
 800471c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004720:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004724:	106d      	asrs	r5, r5, #1
 8004726:	429d      	cmp	r5, r3
 8004728:	bf38      	it	cc
 800472a:	461d      	movcc	r5, r3
 800472c:	0553      	lsls	r3, r2, #21
 800472e:	d531      	bpl.n	8004794 <__ssputs_r+0xa0>
 8004730:	4629      	mov	r1, r5
 8004732:	f000 fb6f 	bl	8004e14 <_malloc_r>
 8004736:	4606      	mov	r6, r0
 8004738:	b950      	cbnz	r0, 8004750 <__ssputs_r+0x5c>
 800473a:	230c      	movs	r3, #12
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	f8ca 3000 	str.w	r3, [sl]
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004750:	464a      	mov	r2, r9
 8004752:	6921      	ldr	r1, [r4, #16]
 8004754:	f000 face 	bl	8004cf4 <memcpy>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800475e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	6126      	str	r6, [r4, #16]
 8004766:	444e      	add	r6, r9
 8004768:	6026      	str	r6, [r4, #0]
 800476a:	463e      	mov	r6, r7
 800476c:	6165      	str	r5, [r4, #20]
 800476e:	eba5 0509 	sub.w	r5, r5, r9
 8004772:	60a5      	str	r5, [r4, #8]
 8004774:	42be      	cmp	r6, r7
 8004776:	d900      	bls.n	800477a <__ssputs_r+0x86>
 8004778:	463e      	mov	r6, r7
 800477a:	4632      	mov	r2, r6
 800477c:	4641      	mov	r1, r8
 800477e:	6820      	ldr	r0, [r4, #0]
 8004780:	f000 fac6 	bl	8004d10 <memmove>
 8004784:	68a3      	ldr	r3, [r4, #8]
 8004786:	2000      	movs	r0, #0
 8004788:	1b9b      	subs	r3, r3, r6
 800478a:	60a3      	str	r3, [r4, #8]
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	4433      	add	r3, r6
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	e7db      	b.n	800474c <__ssputs_r+0x58>
 8004794:	462a      	mov	r2, r5
 8004796:	f000 fbb1 	bl	8004efc <_realloc_r>
 800479a:	4606      	mov	r6, r0
 800479c:	2800      	cmp	r0, #0
 800479e:	d1e1      	bne.n	8004764 <__ssputs_r+0x70>
 80047a0:	4650      	mov	r0, sl
 80047a2:	6921      	ldr	r1, [r4, #16]
 80047a4:	f000 face 	bl	8004d44 <_free_r>
 80047a8:	e7c7      	b.n	800473a <__ssputs_r+0x46>
	...

080047ac <_svfiprintf_r>:
 80047ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b0:	4698      	mov	r8, r3
 80047b2:	898b      	ldrh	r3, [r1, #12]
 80047b4:	4607      	mov	r7, r0
 80047b6:	061b      	lsls	r3, r3, #24
 80047b8:	460d      	mov	r5, r1
 80047ba:	4614      	mov	r4, r2
 80047bc:	b09d      	sub	sp, #116	; 0x74
 80047be:	d50e      	bpl.n	80047de <_svfiprintf_r+0x32>
 80047c0:	690b      	ldr	r3, [r1, #16]
 80047c2:	b963      	cbnz	r3, 80047de <_svfiprintf_r+0x32>
 80047c4:	2140      	movs	r1, #64	; 0x40
 80047c6:	f000 fb25 	bl	8004e14 <_malloc_r>
 80047ca:	6028      	str	r0, [r5, #0]
 80047cc:	6128      	str	r0, [r5, #16]
 80047ce:	b920      	cbnz	r0, 80047da <_svfiprintf_r+0x2e>
 80047d0:	230c      	movs	r3, #12
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	e0d1      	b.n	800497e <_svfiprintf_r+0x1d2>
 80047da:	2340      	movs	r3, #64	; 0x40
 80047dc:	616b      	str	r3, [r5, #20]
 80047de:	2300      	movs	r3, #0
 80047e0:	9309      	str	r3, [sp, #36]	; 0x24
 80047e2:	2320      	movs	r3, #32
 80047e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047e8:	2330      	movs	r3, #48	; 0x30
 80047ea:	f04f 0901 	mov.w	r9, #1
 80047ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80047f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004998 <_svfiprintf_r+0x1ec>
 80047f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047fa:	4623      	mov	r3, r4
 80047fc:	469a      	mov	sl, r3
 80047fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004802:	b10a      	cbz	r2, 8004808 <_svfiprintf_r+0x5c>
 8004804:	2a25      	cmp	r2, #37	; 0x25
 8004806:	d1f9      	bne.n	80047fc <_svfiprintf_r+0x50>
 8004808:	ebba 0b04 	subs.w	fp, sl, r4
 800480c:	d00b      	beq.n	8004826 <_svfiprintf_r+0x7a>
 800480e:	465b      	mov	r3, fp
 8004810:	4622      	mov	r2, r4
 8004812:	4629      	mov	r1, r5
 8004814:	4638      	mov	r0, r7
 8004816:	f7ff ff6d 	bl	80046f4 <__ssputs_r>
 800481a:	3001      	adds	r0, #1
 800481c:	f000 80aa 	beq.w	8004974 <_svfiprintf_r+0x1c8>
 8004820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004822:	445a      	add	r2, fp
 8004824:	9209      	str	r2, [sp, #36]	; 0x24
 8004826:	f89a 3000 	ldrb.w	r3, [sl]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80a2 	beq.w	8004974 <_svfiprintf_r+0x1c8>
 8004830:	2300      	movs	r3, #0
 8004832:	f04f 32ff 	mov.w	r2, #4294967295
 8004836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800483a:	f10a 0a01 	add.w	sl, sl, #1
 800483e:	9304      	str	r3, [sp, #16]
 8004840:	9307      	str	r3, [sp, #28]
 8004842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004846:	931a      	str	r3, [sp, #104]	; 0x68
 8004848:	4654      	mov	r4, sl
 800484a:	2205      	movs	r2, #5
 800484c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004850:	4851      	ldr	r0, [pc, #324]	; (8004998 <_svfiprintf_r+0x1ec>)
 8004852:	f000 fa41 	bl	8004cd8 <memchr>
 8004856:	9a04      	ldr	r2, [sp, #16]
 8004858:	b9d8      	cbnz	r0, 8004892 <_svfiprintf_r+0xe6>
 800485a:	06d0      	lsls	r0, r2, #27
 800485c:	bf44      	itt	mi
 800485e:	2320      	movmi	r3, #32
 8004860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004864:	0711      	lsls	r1, r2, #28
 8004866:	bf44      	itt	mi
 8004868:	232b      	movmi	r3, #43	; 0x2b
 800486a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800486e:	f89a 3000 	ldrb.w	r3, [sl]
 8004872:	2b2a      	cmp	r3, #42	; 0x2a
 8004874:	d015      	beq.n	80048a2 <_svfiprintf_r+0xf6>
 8004876:	4654      	mov	r4, sl
 8004878:	2000      	movs	r0, #0
 800487a:	f04f 0c0a 	mov.w	ip, #10
 800487e:	9a07      	ldr	r2, [sp, #28]
 8004880:	4621      	mov	r1, r4
 8004882:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004886:	3b30      	subs	r3, #48	; 0x30
 8004888:	2b09      	cmp	r3, #9
 800488a:	d94e      	bls.n	800492a <_svfiprintf_r+0x17e>
 800488c:	b1b0      	cbz	r0, 80048bc <_svfiprintf_r+0x110>
 800488e:	9207      	str	r2, [sp, #28]
 8004890:	e014      	b.n	80048bc <_svfiprintf_r+0x110>
 8004892:	eba0 0308 	sub.w	r3, r0, r8
 8004896:	fa09 f303 	lsl.w	r3, r9, r3
 800489a:	4313      	orrs	r3, r2
 800489c:	46a2      	mov	sl, r4
 800489e:	9304      	str	r3, [sp, #16]
 80048a0:	e7d2      	b.n	8004848 <_svfiprintf_r+0x9c>
 80048a2:	9b03      	ldr	r3, [sp, #12]
 80048a4:	1d19      	adds	r1, r3, #4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	9103      	str	r1, [sp, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bfbb      	ittet	lt
 80048ae:	425b      	neglt	r3, r3
 80048b0:	f042 0202 	orrlt.w	r2, r2, #2
 80048b4:	9307      	strge	r3, [sp, #28]
 80048b6:	9307      	strlt	r3, [sp, #28]
 80048b8:	bfb8      	it	lt
 80048ba:	9204      	strlt	r2, [sp, #16]
 80048bc:	7823      	ldrb	r3, [r4, #0]
 80048be:	2b2e      	cmp	r3, #46	; 0x2e
 80048c0:	d10c      	bne.n	80048dc <_svfiprintf_r+0x130>
 80048c2:	7863      	ldrb	r3, [r4, #1]
 80048c4:	2b2a      	cmp	r3, #42	; 0x2a
 80048c6:	d135      	bne.n	8004934 <_svfiprintf_r+0x188>
 80048c8:	9b03      	ldr	r3, [sp, #12]
 80048ca:	3402      	adds	r4, #2
 80048cc:	1d1a      	adds	r2, r3, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	9203      	str	r2, [sp, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bfb8      	it	lt
 80048d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80048da:	9305      	str	r3, [sp, #20]
 80048dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800499c <_svfiprintf_r+0x1f0>
 80048e0:	2203      	movs	r2, #3
 80048e2:	4650      	mov	r0, sl
 80048e4:	7821      	ldrb	r1, [r4, #0]
 80048e6:	f000 f9f7 	bl	8004cd8 <memchr>
 80048ea:	b140      	cbz	r0, 80048fe <_svfiprintf_r+0x152>
 80048ec:	2340      	movs	r3, #64	; 0x40
 80048ee:	eba0 000a 	sub.w	r0, r0, sl
 80048f2:	fa03 f000 	lsl.w	r0, r3, r0
 80048f6:	9b04      	ldr	r3, [sp, #16]
 80048f8:	3401      	adds	r4, #1
 80048fa:	4303      	orrs	r3, r0
 80048fc:	9304      	str	r3, [sp, #16]
 80048fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004902:	2206      	movs	r2, #6
 8004904:	4826      	ldr	r0, [pc, #152]	; (80049a0 <_svfiprintf_r+0x1f4>)
 8004906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800490a:	f000 f9e5 	bl	8004cd8 <memchr>
 800490e:	2800      	cmp	r0, #0
 8004910:	d038      	beq.n	8004984 <_svfiprintf_r+0x1d8>
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <_svfiprintf_r+0x1f8>)
 8004914:	bb1b      	cbnz	r3, 800495e <_svfiprintf_r+0x1b2>
 8004916:	9b03      	ldr	r3, [sp, #12]
 8004918:	3307      	adds	r3, #7
 800491a:	f023 0307 	bic.w	r3, r3, #7
 800491e:	3308      	adds	r3, #8
 8004920:	9303      	str	r3, [sp, #12]
 8004922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004924:	4433      	add	r3, r6
 8004926:	9309      	str	r3, [sp, #36]	; 0x24
 8004928:	e767      	b.n	80047fa <_svfiprintf_r+0x4e>
 800492a:	460c      	mov	r4, r1
 800492c:	2001      	movs	r0, #1
 800492e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004932:	e7a5      	b.n	8004880 <_svfiprintf_r+0xd4>
 8004934:	2300      	movs	r3, #0
 8004936:	f04f 0c0a 	mov.w	ip, #10
 800493a:	4619      	mov	r1, r3
 800493c:	3401      	adds	r4, #1
 800493e:	9305      	str	r3, [sp, #20]
 8004940:	4620      	mov	r0, r4
 8004942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004946:	3a30      	subs	r2, #48	; 0x30
 8004948:	2a09      	cmp	r2, #9
 800494a:	d903      	bls.n	8004954 <_svfiprintf_r+0x1a8>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0c5      	beq.n	80048dc <_svfiprintf_r+0x130>
 8004950:	9105      	str	r1, [sp, #20]
 8004952:	e7c3      	b.n	80048dc <_svfiprintf_r+0x130>
 8004954:	4604      	mov	r4, r0
 8004956:	2301      	movs	r3, #1
 8004958:	fb0c 2101 	mla	r1, ip, r1, r2
 800495c:	e7f0      	b.n	8004940 <_svfiprintf_r+0x194>
 800495e:	ab03      	add	r3, sp, #12
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	462a      	mov	r2, r5
 8004964:	4638      	mov	r0, r7
 8004966:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <_svfiprintf_r+0x1fc>)
 8004968:	a904      	add	r1, sp, #16
 800496a:	f3af 8000 	nop.w
 800496e:	1c42      	adds	r2, r0, #1
 8004970:	4606      	mov	r6, r0
 8004972:	d1d6      	bne.n	8004922 <_svfiprintf_r+0x176>
 8004974:	89ab      	ldrh	r3, [r5, #12]
 8004976:	065b      	lsls	r3, r3, #25
 8004978:	f53f af2c 	bmi.w	80047d4 <_svfiprintf_r+0x28>
 800497c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800497e:	b01d      	add	sp, #116	; 0x74
 8004980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004984:	ab03      	add	r3, sp, #12
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	462a      	mov	r2, r5
 800498a:	4638      	mov	r0, r7
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <_svfiprintf_r+0x1fc>)
 800498e:	a904      	add	r1, sp, #16
 8004990:	f000 f87c 	bl	8004a8c <_printf_i>
 8004994:	e7eb      	b.n	800496e <_svfiprintf_r+0x1c2>
 8004996:	bf00      	nop
 8004998:	080050a4 	.word	0x080050a4
 800499c:	080050aa 	.word	0x080050aa
 80049a0:	080050ae 	.word	0x080050ae
 80049a4:	00000000 	.word	0x00000000
 80049a8:	080046f5 	.word	0x080046f5

080049ac <_printf_common>:
 80049ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	4616      	mov	r6, r2
 80049b2:	4699      	mov	r9, r3
 80049b4:	688a      	ldr	r2, [r1, #8]
 80049b6:	690b      	ldr	r3, [r1, #16]
 80049b8:	4607      	mov	r7, r0
 80049ba:	4293      	cmp	r3, r2
 80049bc:	bfb8      	it	lt
 80049be:	4613      	movlt	r3, r2
 80049c0:	6033      	str	r3, [r6, #0]
 80049c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049c6:	460c      	mov	r4, r1
 80049c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049cc:	b10a      	cbz	r2, 80049d2 <_printf_common+0x26>
 80049ce:	3301      	adds	r3, #1
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	0699      	lsls	r1, r3, #26
 80049d6:	bf42      	ittt	mi
 80049d8:	6833      	ldrmi	r3, [r6, #0]
 80049da:	3302      	addmi	r3, #2
 80049dc:	6033      	strmi	r3, [r6, #0]
 80049de:	6825      	ldr	r5, [r4, #0]
 80049e0:	f015 0506 	ands.w	r5, r5, #6
 80049e4:	d106      	bne.n	80049f4 <_printf_common+0x48>
 80049e6:	f104 0a19 	add.w	sl, r4, #25
 80049ea:	68e3      	ldr	r3, [r4, #12]
 80049ec:	6832      	ldr	r2, [r6, #0]
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	42ab      	cmp	r3, r5
 80049f2:	dc28      	bgt.n	8004a46 <_printf_common+0x9a>
 80049f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049f8:	1e13      	subs	r3, r2, #0
 80049fa:	6822      	ldr	r2, [r4, #0]
 80049fc:	bf18      	it	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	0692      	lsls	r2, r2, #26
 8004a02:	d42d      	bmi.n	8004a60 <_printf_common+0xb4>
 8004a04:	4649      	mov	r1, r9
 8004a06:	4638      	mov	r0, r7
 8004a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a0c:	47c0      	blx	r8
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d020      	beq.n	8004a54 <_printf_common+0xa8>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	68e5      	ldr	r5, [r4, #12]
 8004a16:	f003 0306 	and.w	r3, r3, #6
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	bf18      	it	ne
 8004a1e:	2500      	movne	r5, #0
 8004a20:	6832      	ldr	r2, [r6, #0]
 8004a22:	f04f 0600 	mov.w	r6, #0
 8004a26:	68a3      	ldr	r3, [r4, #8]
 8004a28:	bf08      	it	eq
 8004a2a:	1aad      	subeq	r5, r5, r2
 8004a2c:	6922      	ldr	r2, [r4, #16]
 8004a2e:	bf08      	it	eq
 8004a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a34:	4293      	cmp	r3, r2
 8004a36:	bfc4      	itt	gt
 8004a38:	1a9b      	subgt	r3, r3, r2
 8004a3a:	18ed      	addgt	r5, r5, r3
 8004a3c:	341a      	adds	r4, #26
 8004a3e:	42b5      	cmp	r5, r6
 8004a40:	d11a      	bne.n	8004a78 <_printf_common+0xcc>
 8004a42:	2000      	movs	r0, #0
 8004a44:	e008      	b.n	8004a58 <_printf_common+0xac>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4652      	mov	r2, sl
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	47c0      	blx	r8
 8004a50:	3001      	adds	r0, #1
 8004a52:	d103      	bne.n	8004a5c <_printf_common+0xb0>
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	e7c4      	b.n	80049ea <_printf_common+0x3e>
 8004a60:	2030      	movs	r0, #48	; 0x30
 8004a62:	18e1      	adds	r1, r4, r3
 8004a64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a6e:	4422      	add	r2, r4
 8004a70:	3302      	adds	r3, #2
 8004a72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a76:	e7c5      	b.n	8004a04 <_printf_common+0x58>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	4638      	mov	r0, r7
 8004a80:	47c0      	blx	r8
 8004a82:	3001      	adds	r0, #1
 8004a84:	d0e6      	beq.n	8004a54 <_printf_common+0xa8>
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7d9      	b.n	8004a3e <_printf_common+0x92>
	...

08004a8c <_printf_i>:
 8004a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	7e0f      	ldrb	r7, [r1, #24]
 8004a92:	4691      	mov	r9, r2
 8004a94:	2f78      	cmp	r7, #120	; 0x78
 8004a96:	4680      	mov	r8, r0
 8004a98:	460c      	mov	r4, r1
 8004a9a:	469a      	mov	sl, r3
 8004a9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aa2:	d807      	bhi.n	8004ab4 <_printf_i+0x28>
 8004aa4:	2f62      	cmp	r7, #98	; 0x62
 8004aa6:	d80a      	bhi.n	8004abe <_printf_i+0x32>
 8004aa8:	2f00      	cmp	r7, #0
 8004aaa:	f000 80d9 	beq.w	8004c60 <_printf_i+0x1d4>
 8004aae:	2f58      	cmp	r7, #88	; 0x58
 8004ab0:	f000 80a4 	beq.w	8004bfc <_printf_i+0x170>
 8004ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004abc:	e03a      	b.n	8004b34 <_printf_i+0xa8>
 8004abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ac2:	2b15      	cmp	r3, #21
 8004ac4:	d8f6      	bhi.n	8004ab4 <_printf_i+0x28>
 8004ac6:	a101      	add	r1, pc, #4	; (adr r1, 8004acc <_printf_i+0x40>)
 8004ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	08004b39 	.word	0x08004b39
 8004ad4:	08004ab5 	.word	0x08004ab5
 8004ad8:	08004ab5 	.word	0x08004ab5
 8004adc:	08004ab5 	.word	0x08004ab5
 8004ae0:	08004ab5 	.word	0x08004ab5
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004ab5 	.word	0x08004ab5
 8004aec:	08004ab5 	.word	0x08004ab5
 8004af0:	08004ab5 	.word	0x08004ab5
 8004af4:	08004ab5 	.word	0x08004ab5
 8004af8:	08004c47 	.word	0x08004c47
 8004afc:	08004b69 	.word	0x08004b69
 8004b00:	08004c29 	.word	0x08004c29
 8004b04:	08004ab5 	.word	0x08004ab5
 8004b08:	08004ab5 	.word	0x08004ab5
 8004b0c:	08004c69 	.word	0x08004c69
 8004b10:	08004ab5 	.word	0x08004ab5
 8004b14:	08004b69 	.word	0x08004b69
 8004b18:	08004ab5 	.word	0x08004ab5
 8004b1c:	08004ab5 	.word	0x08004ab5
 8004b20:	08004c31 	.word	0x08004c31
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	1d1a      	adds	r2, r3, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	602a      	str	r2, [r5, #0]
 8004b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0a4      	b.n	8004c82 <_printf_i+0x1f6>
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	6829      	ldr	r1, [r5, #0]
 8004b3c:	0606      	lsls	r6, r0, #24
 8004b3e:	f101 0304 	add.w	r3, r1, #4
 8004b42:	d50a      	bpl.n	8004b5a <_printf_i+0xce>
 8004b44:	680e      	ldr	r6, [r1, #0]
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	2e00      	cmp	r6, #0
 8004b4a:	da03      	bge.n	8004b54 <_printf_i+0xc8>
 8004b4c:	232d      	movs	r3, #45	; 0x2d
 8004b4e:	4276      	negs	r6, r6
 8004b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b54:	230a      	movs	r3, #10
 8004b56:	485e      	ldr	r0, [pc, #376]	; (8004cd0 <_printf_i+0x244>)
 8004b58:	e019      	b.n	8004b8e <_printf_i+0x102>
 8004b5a:	680e      	ldr	r6, [r1, #0]
 8004b5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b60:	602b      	str	r3, [r5, #0]
 8004b62:	bf18      	it	ne
 8004b64:	b236      	sxthne	r6, r6
 8004b66:	e7ef      	b.n	8004b48 <_printf_i+0xbc>
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	1d19      	adds	r1, r3, #4
 8004b6e:	6029      	str	r1, [r5, #0]
 8004b70:	0601      	lsls	r1, r0, #24
 8004b72:	d501      	bpl.n	8004b78 <_printf_i+0xec>
 8004b74:	681e      	ldr	r6, [r3, #0]
 8004b76:	e002      	b.n	8004b7e <_printf_i+0xf2>
 8004b78:	0646      	lsls	r6, r0, #25
 8004b7a:	d5fb      	bpl.n	8004b74 <_printf_i+0xe8>
 8004b7c:	881e      	ldrh	r6, [r3, #0]
 8004b7e:	2f6f      	cmp	r7, #111	; 0x6f
 8004b80:	bf0c      	ite	eq
 8004b82:	2308      	moveq	r3, #8
 8004b84:	230a      	movne	r3, #10
 8004b86:	4852      	ldr	r0, [pc, #328]	; (8004cd0 <_printf_i+0x244>)
 8004b88:	2100      	movs	r1, #0
 8004b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b8e:	6865      	ldr	r5, [r4, #4]
 8004b90:	2d00      	cmp	r5, #0
 8004b92:	bfa8      	it	ge
 8004b94:	6821      	ldrge	r1, [r4, #0]
 8004b96:	60a5      	str	r5, [r4, #8]
 8004b98:	bfa4      	itt	ge
 8004b9a:	f021 0104 	bicge.w	r1, r1, #4
 8004b9e:	6021      	strge	r1, [r4, #0]
 8004ba0:	b90e      	cbnz	r6, 8004ba6 <_printf_i+0x11a>
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	d04d      	beq.n	8004c42 <_printf_i+0x1b6>
 8004ba6:	4615      	mov	r5, r2
 8004ba8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bac:	fb03 6711 	mls	r7, r3, r1, r6
 8004bb0:	5dc7      	ldrb	r7, [r0, r7]
 8004bb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bb6:	4637      	mov	r7, r6
 8004bb8:	42bb      	cmp	r3, r7
 8004bba:	460e      	mov	r6, r1
 8004bbc:	d9f4      	bls.n	8004ba8 <_printf_i+0x11c>
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d10b      	bne.n	8004bda <_printf_i+0x14e>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	07de      	lsls	r6, r3, #31
 8004bc6:	d508      	bpl.n	8004bda <_printf_i+0x14e>
 8004bc8:	6923      	ldr	r3, [r4, #16]
 8004bca:	6861      	ldr	r1, [r4, #4]
 8004bcc:	4299      	cmp	r1, r3
 8004bce:	bfde      	ittt	le
 8004bd0:	2330      	movle	r3, #48	; 0x30
 8004bd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bda:	1b52      	subs	r2, r2, r5
 8004bdc:	6122      	str	r2, [r4, #16]
 8004bde:	464b      	mov	r3, r9
 8004be0:	4621      	mov	r1, r4
 8004be2:	4640      	mov	r0, r8
 8004be4:	f8cd a000 	str.w	sl, [sp]
 8004be8:	aa03      	add	r2, sp, #12
 8004bea:	f7ff fedf 	bl	80049ac <_printf_common>
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d14c      	bne.n	8004c8c <_printf_i+0x200>
 8004bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf6:	b004      	add	sp, #16
 8004bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfc:	4834      	ldr	r0, [pc, #208]	; (8004cd0 <_printf_i+0x244>)
 8004bfe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c02:	6829      	ldr	r1, [r5, #0]
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c0a:	6029      	str	r1, [r5, #0]
 8004c0c:	061d      	lsls	r5, r3, #24
 8004c0e:	d514      	bpl.n	8004c3a <_printf_i+0x1ae>
 8004c10:	07df      	lsls	r7, r3, #31
 8004c12:	bf44      	itt	mi
 8004c14:	f043 0320 	orrmi.w	r3, r3, #32
 8004c18:	6023      	strmi	r3, [r4, #0]
 8004c1a:	b91e      	cbnz	r6, 8004c24 <_printf_i+0x198>
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	f023 0320 	bic.w	r3, r3, #32
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	2310      	movs	r3, #16
 8004c26:	e7af      	b.n	8004b88 <_printf_i+0xfc>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	f043 0320 	orr.w	r3, r3, #32
 8004c2e:	6023      	str	r3, [r4, #0]
 8004c30:	2378      	movs	r3, #120	; 0x78
 8004c32:	4828      	ldr	r0, [pc, #160]	; (8004cd4 <_printf_i+0x248>)
 8004c34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c38:	e7e3      	b.n	8004c02 <_printf_i+0x176>
 8004c3a:	0659      	lsls	r1, r3, #25
 8004c3c:	bf48      	it	mi
 8004c3e:	b2b6      	uxthmi	r6, r6
 8004c40:	e7e6      	b.n	8004c10 <_printf_i+0x184>
 8004c42:	4615      	mov	r5, r2
 8004c44:	e7bb      	b.n	8004bbe <_printf_i+0x132>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	6826      	ldr	r6, [r4, #0]
 8004c4a:	1d18      	adds	r0, r3, #4
 8004c4c:	6961      	ldr	r1, [r4, #20]
 8004c4e:	6028      	str	r0, [r5, #0]
 8004c50:	0635      	lsls	r5, r6, #24
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	d501      	bpl.n	8004c5a <_printf_i+0x1ce>
 8004c56:	6019      	str	r1, [r3, #0]
 8004c58:	e002      	b.n	8004c60 <_printf_i+0x1d4>
 8004c5a:	0670      	lsls	r0, r6, #25
 8004c5c:	d5fb      	bpl.n	8004c56 <_printf_i+0x1ca>
 8004c5e:	8019      	strh	r1, [r3, #0]
 8004c60:	2300      	movs	r3, #0
 8004c62:	4615      	mov	r5, r2
 8004c64:	6123      	str	r3, [r4, #16]
 8004c66:	e7ba      	b.n	8004bde <_printf_i+0x152>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	1d1a      	adds	r2, r3, #4
 8004c6e:	602a      	str	r2, [r5, #0]
 8004c70:	681d      	ldr	r5, [r3, #0]
 8004c72:	6862      	ldr	r2, [r4, #4]
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f82f 	bl	8004cd8 <memchr>
 8004c7a:	b108      	cbz	r0, 8004c80 <_printf_i+0x1f4>
 8004c7c:	1b40      	subs	r0, r0, r5
 8004c7e:	6060      	str	r0, [r4, #4]
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	2300      	movs	r3, #0
 8004c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c8a:	e7a8      	b.n	8004bde <_printf_i+0x152>
 8004c8c:	462a      	mov	r2, r5
 8004c8e:	4649      	mov	r1, r9
 8004c90:	4640      	mov	r0, r8
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	47d0      	blx	sl
 8004c96:	3001      	adds	r0, #1
 8004c98:	d0ab      	beq.n	8004bf2 <_printf_i+0x166>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	079b      	lsls	r3, r3, #30
 8004c9e:	d413      	bmi.n	8004cc8 <_printf_i+0x23c>
 8004ca0:	68e0      	ldr	r0, [r4, #12]
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	bfb8      	it	lt
 8004ca8:	4618      	movlt	r0, r3
 8004caa:	e7a4      	b.n	8004bf6 <_printf_i+0x16a>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4632      	mov	r2, r6
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	47d0      	blx	sl
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d09b      	beq.n	8004bf2 <_printf_i+0x166>
 8004cba:	3501      	adds	r5, #1
 8004cbc:	68e3      	ldr	r3, [r4, #12]
 8004cbe:	9903      	ldr	r1, [sp, #12]
 8004cc0:	1a5b      	subs	r3, r3, r1
 8004cc2:	42ab      	cmp	r3, r5
 8004cc4:	dcf2      	bgt.n	8004cac <_printf_i+0x220>
 8004cc6:	e7eb      	b.n	8004ca0 <_printf_i+0x214>
 8004cc8:	2500      	movs	r5, #0
 8004cca:	f104 0619 	add.w	r6, r4, #25
 8004cce:	e7f5      	b.n	8004cbc <_printf_i+0x230>
 8004cd0:	080050b5 	.word	0x080050b5
 8004cd4:	080050c6 	.word	0x080050c6

08004cd8 <memchr>:
 8004cd8:	4603      	mov	r3, r0
 8004cda:	b510      	push	{r4, lr}
 8004cdc:	b2c9      	uxtb	r1, r1
 8004cde:	4402      	add	r2, r0
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	d101      	bne.n	8004cea <memchr+0x12>
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	e003      	b.n	8004cf2 <memchr+0x1a>
 8004cea:	7804      	ldrb	r4, [r0, #0]
 8004cec:	3301      	adds	r3, #1
 8004cee:	428c      	cmp	r4, r1
 8004cf0:	d1f6      	bne.n	8004ce0 <memchr+0x8>
 8004cf2:	bd10      	pop	{r4, pc}

08004cf4 <memcpy>:
 8004cf4:	440a      	add	r2, r1
 8004cf6:	4291      	cmp	r1, r2
 8004cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cfc:	d100      	bne.n	8004d00 <memcpy+0xc>
 8004cfe:	4770      	bx	lr
 8004d00:	b510      	push	{r4, lr}
 8004d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d06:	4291      	cmp	r1, r2
 8004d08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d0c:	d1f9      	bne.n	8004d02 <memcpy+0xe>
 8004d0e:	bd10      	pop	{r4, pc}

08004d10 <memmove>:
 8004d10:	4288      	cmp	r0, r1
 8004d12:	b510      	push	{r4, lr}
 8004d14:	eb01 0402 	add.w	r4, r1, r2
 8004d18:	d902      	bls.n	8004d20 <memmove+0x10>
 8004d1a:	4284      	cmp	r4, r0
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	d807      	bhi.n	8004d30 <memmove+0x20>
 8004d20:	1e43      	subs	r3, r0, #1
 8004d22:	42a1      	cmp	r1, r4
 8004d24:	d008      	beq.n	8004d38 <memmove+0x28>
 8004d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d2e:	e7f8      	b.n	8004d22 <memmove+0x12>
 8004d30:	4601      	mov	r1, r0
 8004d32:	4402      	add	r2, r0
 8004d34:	428a      	cmp	r2, r1
 8004d36:	d100      	bne.n	8004d3a <memmove+0x2a>
 8004d38:	bd10      	pop	{r4, pc}
 8004d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d42:	e7f7      	b.n	8004d34 <memmove+0x24>

08004d44 <_free_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4605      	mov	r5, r0
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	d040      	beq.n	8004dce <_free_r+0x8a>
 8004d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d50:	1f0c      	subs	r4, r1, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bfb8      	it	lt
 8004d56:	18e4      	addlt	r4, r4, r3
 8004d58:	f000 f910 	bl	8004f7c <__malloc_lock>
 8004d5c:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <_free_r+0x8c>)
 8004d5e:	6813      	ldr	r3, [r2, #0]
 8004d60:	b933      	cbnz	r3, 8004d70 <_free_r+0x2c>
 8004d62:	6063      	str	r3, [r4, #4]
 8004d64:	6014      	str	r4, [r2, #0]
 8004d66:	4628      	mov	r0, r5
 8004d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d6c:	f000 b90c 	b.w	8004f88 <__malloc_unlock>
 8004d70:	42a3      	cmp	r3, r4
 8004d72:	d908      	bls.n	8004d86 <_free_r+0x42>
 8004d74:	6820      	ldr	r0, [r4, #0]
 8004d76:	1821      	adds	r1, r4, r0
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	bf01      	itttt	eq
 8004d7c:	6819      	ldreq	r1, [r3, #0]
 8004d7e:	685b      	ldreq	r3, [r3, #4]
 8004d80:	1809      	addeq	r1, r1, r0
 8004d82:	6021      	streq	r1, [r4, #0]
 8004d84:	e7ed      	b.n	8004d62 <_free_r+0x1e>
 8004d86:	461a      	mov	r2, r3
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	b10b      	cbz	r3, 8004d90 <_free_r+0x4c>
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	d9fa      	bls.n	8004d86 <_free_r+0x42>
 8004d90:	6811      	ldr	r1, [r2, #0]
 8004d92:	1850      	adds	r0, r2, r1
 8004d94:	42a0      	cmp	r0, r4
 8004d96:	d10b      	bne.n	8004db0 <_free_r+0x6c>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	4401      	add	r1, r0
 8004d9c:	1850      	adds	r0, r2, r1
 8004d9e:	4283      	cmp	r3, r0
 8004da0:	6011      	str	r1, [r2, #0]
 8004da2:	d1e0      	bne.n	8004d66 <_free_r+0x22>
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4401      	add	r1, r0
 8004daa:	6011      	str	r1, [r2, #0]
 8004dac:	6053      	str	r3, [r2, #4]
 8004dae:	e7da      	b.n	8004d66 <_free_r+0x22>
 8004db0:	d902      	bls.n	8004db8 <_free_r+0x74>
 8004db2:	230c      	movs	r3, #12
 8004db4:	602b      	str	r3, [r5, #0]
 8004db6:	e7d6      	b.n	8004d66 <_free_r+0x22>
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	1821      	adds	r1, r4, r0
 8004dbc:	428b      	cmp	r3, r1
 8004dbe:	bf01      	itttt	eq
 8004dc0:	6819      	ldreq	r1, [r3, #0]
 8004dc2:	685b      	ldreq	r3, [r3, #4]
 8004dc4:	1809      	addeq	r1, r1, r0
 8004dc6:	6021      	streq	r1, [r4, #0]
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	6054      	str	r4, [r2, #4]
 8004dcc:	e7cb      	b.n	8004d66 <_free_r+0x22>
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	2000037c 	.word	0x2000037c

08004dd4 <sbrk_aligned>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4e0e      	ldr	r6, [pc, #56]	; (8004e10 <sbrk_aligned+0x3c>)
 8004dd8:	460c      	mov	r4, r1
 8004dda:	6831      	ldr	r1, [r6, #0]
 8004ddc:	4605      	mov	r5, r0
 8004dde:	b911      	cbnz	r1, 8004de6 <sbrk_aligned+0x12>
 8004de0:	f000 f8bc 	bl	8004f5c <_sbrk_r>
 8004de4:	6030      	str	r0, [r6, #0]
 8004de6:	4621      	mov	r1, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 f8b7 	bl	8004f5c <_sbrk_r>
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	d00a      	beq.n	8004e08 <sbrk_aligned+0x34>
 8004df2:	1cc4      	adds	r4, r0, #3
 8004df4:	f024 0403 	bic.w	r4, r4, #3
 8004df8:	42a0      	cmp	r0, r4
 8004dfa:	d007      	beq.n	8004e0c <sbrk_aligned+0x38>
 8004dfc:	1a21      	subs	r1, r4, r0
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 f8ac 	bl	8004f5c <_sbrk_r>
 8004e04:	3001      	adds	r0, #1
 8004e06:	d101      	bne.n	8004e0c <sbrk_aligned+0x38>
 8004e08:	f04f 34ff 	mov.w	r4, #4294967295
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	20000380 	.word	0x20000380

08004e14 <_malloc_r>:
 8004e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e18:	1ccd      	adds	r5, r1, #3
 8004e1a:	f025 0503 	bic.w	r5, r5, #3
 8004e1e:	3508      	adds	r5, #8
 8004e20:	2d0c      	cmp	r5, #12
 8004e22:	bf38      	it	cc
 8004e24:	250c      	movcc	r5, #12
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	4607      	mov	r7, r0
 8004e2a:	db01      	blt.n	8004e30 <_malloc_r+0x1c>
 8004e2c:	42a9      	cmp	r1, r5
 8004e2e:	d905      	bls.n	8004e3c <_malloc_r+0x28>
 8004e30:	230c      	movs	r3, #12
 8004e32:	2600      	movs	r6, #0
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4630      	mov	r0, r6
 8004e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e3c:	4e2e      	ldr	r6, [pc, #184]	; (8004ef8 <_malloc_r+0xe4>)
 8004e3e:	f000 f89d 	bl	8004f7c <__malloc_lock>
 8004e42:	6833      	ldr	r3, [r6, #0]
 8004e44:	461c      	mov	r4, r3
 8004e46:	bb34      	cbnz	r4, 8004e96 <_malloc_r+0x82>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f7ff ffc2 	bl	8004dd4 <sbrk_aligned>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	4604      	mov	r4, r0
 8004e54:	d14d      	bne.n	8004ef2 <_malloc_r+0xde>
 8004e56:	6834      	ldr	r4, [r6, #0]
 8004e58:	4626      	mov	r6, r4
 8004e5a:	2e00      	cmp	r6, #0
 8004e5c:	d140      	bne.n	8004ee0 <_malloc_r+0xcc>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	4631      	mov	r1, r6
 8004e62:	4638      	mov	r0, r7
 8004e64:	eb04 0803 	add.w	r8, r4, r3
 8004e68:	f000 f878 	bl	8004f5c <_sbrk_r>
 8004e6c:	4580      	cmp	r8, r0
 8004e6e:	d13a      	bne.n	8004ee6 <_malloc_r+0xd2>
 8004e70:	6821      	ldr	r1, [r4, #0]
 8004e72:	3503      	adds	r5, #3
 8004e74:	1a6d      	subs	r5, r5, r1
 8004e76:	f025 0503 	bic.w	r5, r5, #3
 8004e7a:	3508      	adds	r5, #8
 8004e7c:	2d0c      	cmp	r5, #12
 8004e7e:	bf38      	it	cc
 8004e80:	250c      	movcc	r5, #12
 8004e82:	4638      	mov	r0, r7
 8004e84:	4629      	mov	r1, r5
 8004e86:	f7ff ffa5 	bl	8004dd4 <sbrk_aligned>
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d02b      	beq.n	8004ee6 <_malloc_r+0xd2>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	442b      	add	r3, r5
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	e00e      	b.n	8004eb4 <_malloc_r+0xa0>
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	1b52      	subs	r2, r2, r5
 8004e9a:	d41e      	bmi.n	8004eda <_malloc_r+0xc6>
 8004e9c:	2a0b      	cmp	r2, #11
 8004e9e:	d916      	bls.n	8004ece <_malloc_r+0xba>
 8004ea0:	1961      	adds	r1, r4, r5
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	6025      	str	r5, [r4, #0]
 8004ea6:	bf18      	it	ne
 8004ea8:	6059      	strne	r1, [r3, #4]
 8004eaa:	6863      	ldr	r3, [r4, #4]
 8004eac:	bf08      	it	eq
 8004eae:	6031      	streq	r1, [r6, #0]
 8004eb0:	5162      	str	r2, [r4, r5]
 8004eb2:	604b      	str	r3, [r1, #4]
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	f104 060b 	add.w	r6, r4, #11
 8004eba:	f000 f865 	bl	8004f88 <__malloc_unlock>
 8004ebe:	f026 0607 	bic.w	r6, r6, #7
 8004ec2:	1d23      	adds	r3, r4, #4
 8004ec4:	1af2      	subs	r2, r6, r3
 8004ec6:	d0b6      	beq.n	8004e36 <_malloc_r+0x22>
 8004ec8:	1b9b      	subs	r3, r3, r6
 8004eca:	50a3      	str	r3, [r4, r2]
 8004ecc:	e7b3      	b.n	8004e36 <_malloc_r+0x22>
 8004ece:	6862      	ldr	r2, [r4, #4]
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	bf0c      	ite	eq
 8004ed4:	6032      	streq	r2, [r6, #0]
 8004ed6:	605a      	strne	r2, [r3, #4]
 8004ed8:	e7ec      	b.n	8004eb4 <_malloc_r+0xa0>
 8004eda:	4623      	mov	r3, r4
 8004edc:	6864      	ldr	r4, [r4, #4]
 8004ede:	e7b2      	b.n	8004e46 <_malloc_r+0x32>
 8004ee0:	4634      	mov	r4, r6
 8004ee2:	6876      	ldr	r6, [r6, #4]
 8004ee4:	e7b9      	b.n	8004e5a <_malloc_r+0x46>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	4638      	mov	r0, r7
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	f000 f84c 	bl	8004f88 <__malloc_unlock>
 8004ef0:	e7a1      	b.n	8004e36 <_malloc_r+0x22>
 8004ef2:	6025      	str	r5, [r4, #0]
 8004ef4:	e7de      	b.n	8004eb4 <_malloc_r+0xa0>
 8004ef6:	bf00      	nop
 8004ef8:	2000037c 	.word	0x2000037c

08004efc <_realloc_r>:
 8004efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f00:	4680      	mov	r8, r0
 8004f02:	4614      	mov	r4, r2
 8004f04:	460e      	mov	r6, r1
 8004f06:	b921      	cbnz	r1, 8004f12 <_realloc_r+0x16>
 8004f08:	4611      	mov	r1, r2
 8004f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0e:	f7ff bf81 	b.w	8004e14 <_malloc_r>
 8004f12:	b92a      	cbnz	r2, 8004f20 <_realloc_r+0x24>
 8004f14:	f7ff ff16 	bl	8004d44 <_free_r>
 8004f18:	4625      	mov	r5, r4
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f20:	f000 f838 	bl	8004f94 <_malloc_usable_size_r>
 8004f24:	4284      	cmp	r4, r0
 8004f26:	4607      	mov	r7, r0
 8004f28:	d802      	bhi.n	8004f30 <_realloc_r+0x34>
 8004f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f2e:	d812      	bhi.n	8004f56 <_realloc_r+0x5a>
 8004f30:	4621      	mov	r1, r4
 8004f32:	4640      	mov	r0, r8
 8004f34:	f7ff ff6e 	bl	8004e14 <_malloc_r>
 8004f38:	4605      	mov	r5, r0
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d0ed      	beq.n	8004f1a <_realloc_r+0x1e>
 8004f3e:	42bc      	cmp	r4, r7
 8004f40:	4622      	mov	r2, r4
 8004f42:	4631      	mov	r1, r6
 8004f44:	bf28      	it	cs
 8004f46:	463a      	movcs	r2, r7
 8004f48:	f7ff fed4 	bl	8004cf4 <memcpy>
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4640      	mov	r0, r8
 8004f50:	f7ff fef8 	bl	8004d44 <_free_r>
 8004f54:	e7e1      	b.n	8004f1a <_realloc_r+0x1e>
 8004f56:	4635      	mov	r5, r6
 8004f58:	e7df      	b.n	8004f1a <_realloc_r+0x1e>
	...

08004f5c <_sbrk_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	2300      	movs	r3, #0
 8004f60:	4d05      	ldr	r5, [pc, #20]	; (8004f78 <_sbrk_r+0x1c>)
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f7fc fac4 	bl	80014f4 <_sbrk>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_sbrk_r+0x1a>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_sbrk_r+0x1a>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	20000384 	.word	0x20000384

08004f7c <__malloc_lock>:
 8004f7c:	4801      	ldr	r0, [pc, #4]	; (8004f84 <__malloc_lock+0x8>)
 8004f7e:	f000 b811 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 8004f82:	bf00      	nop
 8004f84:	20000388 	.word	0x20000388

08004f88 <__malloc_unlock>:
 8004f88:	4801      	ldr	r0, [pc, #4]	; (8004f90 <__malloc_unlock+0x8>)
 8004f8a:	f000 b80c 	b.w	8004fa6 <__retarget_lock_release_recursive>
 8004f8e:	bf00      	nop
 8004f90:	20000388 	.word	0x20000388

08004f94 <_malloc_usable_size_r>:
 8004f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f98:	1f18      	subs	r0, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bfbc      	itt	lt
 8004f9e:	580b      	ldrlt	r3, [r1, r0]
 8004fa0:	18c0      	addlt	r0, r0, r3
 8004fa2:	4770      	bx	lr

08004fa4 <__retarget_lock_acquire_recursive>:
 8004fa4:	4770      	bx	lr

08004fa6 <__retarget_lock_release_recursive>:
 8004fa6:	4770      	bx	lr

08004fa8 <_init>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr

08004fb4 <_fini>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	bf00      	nop
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr
